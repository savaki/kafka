// Code generated by kafka-protocol-gen. DO NOT EDIT.
//
// Copyright 2019 Matt Ho
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package kafka

import (
	"github.com/savaki/kafka/protocol"
	"github.com/savaki/kafka/sizeof"
)

// HeartbeatRequest; ApiKey: 12, Versions: 0-4
type HeartbeatRequest struct {
	GroupId         string // The group id. Versions: 0+
	GenerationId    int32  // The generation of the group. Versions: 0+
	MemberId        string // The member ID. Versions: 0+
	GroupInstanceId string // The unique identifier of the consumer instance provided by end user. Versions: 3+
}

// size of HeartbeatRequest; Versions: 0-4
func (t HeartbeatRequest) size(version int16) int32 {
	var sz int32
	sz += sizeof.String(t.GroupId)  // GroupId
	sz += sizeof.Int32              // GenerationId
	sz += sizeof.String(t.MemberId) // MemberId
	if version >= 3 {
		sz += sizeof.String(t.GroupInstanceId) // GroupInstanceId
	}
	return sz
}

// encode HeartbeatRequest; Versions: 0-4
func (t HeartbeatRequest) encode(e *protocol.Encoder, version int16) {
	e.PutString(t.GroupId)     // GroupId
	e.PutInt32(t.GenerationId) // GenerationId
	e.PutString(t.MemberId)    // MemberId
	if version >= 3 {
		e.PutString(t.GroupInstanceId) // GroupInstanceId
	}
}

// decode HeartbeatRequest; Versions: 0-4
func (t *HeartbeatRequest) decode(d *protocol.Decoder, version int16) error {
	var err error
	t.GroupId, err = d.String()
	if err != nil {
		return err
	}
	t.GenerationId, err = d.Int32()
	if err != nil {
		return err
	}
	t.MemberId, err = d.String()
	if err != nil {
		return err
	}
	if version >= 3 {
		t.GroupInstanceId, err = d.String()
		if err != nil {
			return err
		}
	}
	return err
}
