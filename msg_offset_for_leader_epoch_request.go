// Code generated by kafka-protocol-gen. DO NOT EDIT.
//
// Copyright 2019 Matt Ho
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package kafka

import (
	"github.com/savaki/kafka/protocol"
	"github.com/savaki/kafka/sizeof"
)

// OffsetForLeaderEpochRequest; ApiKey: 23, Versions: 0-3
type OffsetForLeaderEpochRequest struct {
	ReplicaId int32                    // The broker ID of the follower, of -1 if this request is from a consumer. Versions: 3+
	Topics    []OffsetForLeaderTopic23 // Each topic to get offsets for. Versions: 0+
}

// size of OffsetForLeaderEpochRequest; Versions: 0-3
func (t OffsetForLeaderEpochRequest) size(version int16) int32 {
	var sz int32
	if version >= 3 {
		sz += sizeof.Int32 // ReplicaId
	}
	sz += sizeof.ArrayLength // Topics
	for i := len(t.Topics) - 1; i >= 0; i-- {
		sz += t.Topics[i].size(version)
	}
	return sz
}

// encode OffsetForLeaderEpochRequest; Versions: 0-3
func (t OffsetForLeaderEpochRequest) encode(e *protocol.Encoder, version int16) {
	if version >= 3 {
		e.PutInt32(t.ReplicaId) // ReplicaId
	}
	// Topics
	len1 := len(t.Topics)
	e.PutArrayLength(len1)
	for i := 0; i < len1; i++ {
		t.Topics[i].encode(e, version)
	}
}

// decode OffsetForLeaderEpochRequest; Versions: 0-3
func (t *OffsetForLeaderEpochRequest) decode(d *protocol.Decoder, version int16) error {
	var err error
	if version >= 3 {
		t.ReplicaId, err = d.Int32()
		if err != nil {
			return err
		}
	}
	// Topics
	if n, err := d.ArrayLength(); err != nil {
		return err
	} else if n >= 0 {
		t.Topics = make([]OffsetForLeaderTopic23, n)
		for i := 0; i < n; i++ {
			var item OffsetForLeaderTopic23
			if err := (&item).decode(d, version); err != nil {
				return err
			}
			t.Topics[i] = item
		}
	}
	return err
}

type OffsetForLeaderTopic23 struct {
	Name       string                       // The topic name. Versions: 0+
	Partitions []OffsetForLeaderPartition23 // Each partition to get offsets for. Versions: 0+
}

// size of OffsetForLeaderTopic23; Versions: 0-3
func (t OffsetForLeaderTopic23) size(version int16) int32 {
	var sz int32
	sz += sizeof.String(t.Name) // Name
	sz += sizeof.ArrayLength    // Partitions
	for i := len(t.Partitions) - 1; i >= 0; i-- {
		sz += t.Partitions[i].size(version)
	}
	return sz
}

// encode OffsetForLeaderTopic23; Versions: 0-3
func (t OffsetForLeaderTopic23) encode(e *protocol.Encoder, version int16) {
	e.PutString(t.Name) // Name
	// Partitions
	len1 := len(t.Partitions)
	e.PutArrayLength(len1)
	for i := 0; i < len1; i++ {
		t.Partitions[i].encode(e, version)
	}
}

// decode OffsetForLeaderTopic23; Versions: 0-3
func (t *OffsetForLeaderTopic23) decode(d *protocol.Decoder, version int16) error {
	var err error
	t.Name, err = d.String()
	if err != nil {
		return err
	}
	// Partitions
	if n, err := d.ArrayLength(); err != nil {
		return err
	} else if n >= 0 {
		t.Partitions = make([]OffsetForLeaderPartition23, n)
		for i := 0; i < n; i++ {
			var item OffsetForLeaderPartition23
			if err := (&item).decode(d, version); err != nil {
				return err
			}
			t.Partitions[i] = item
		}
	}
	return err
}

type OffsetForLeaderPartition23 struct {
	PartitionIndex     int32 // The partition index. Versions: 0+
	CurrentLeaderEpoch int32 // An epoch used to fence consumers/replicas with old metadata.  If the epoch provided by the client is larger than the current epoch known to the broker, then the UNKNOWN_LEADER_EPOCH error code will be returned. If the provided epoch is smaller, then the FENCED_LEADER_EPOCH error code will be returned. Versions: 2+
	LeaderEpoch        int32 // The epoch to look up an offset for. Versions: 0+
}

// size of OffsetForLeaderPartition23; Versions: 0-3
func (t OffsetForLeaderPartition23) size(version int16) int32 {
	var sz int32
	sz += sizeof.Int32 // PartitionIndex
	if version >= 2 {
		sz += sizeof.Int32 // CurrentLeaderEpoch
	}
	sz += sizeof.Int32 // LeaderEpoch
	return sz
}

// encode OffsetForLeaderPartition23; Versions: 0-3
func (t OffsetForLeaderPartition23) encode(e *protocol.Encoder, version int16) {
	e.PutInt32(t.PartitionIndex) // PartitionIndex
	if version >= 2 {
		e.PutInt32(t.CurrentLeaderEpoch) // CurrentLeaderEpoch
	}
	e.PutInt32(t.LeaderEpoch) // LeaderEpoch
}

// decode OffsetForLeaderPartition23; Versions: 0-3
func (t *OffsetForLeaderPartition23) decode(d *protocol.Decoder, version int16) error {
	var err error
	t.PartitionIndex, err = d.Int32()
	if err != nil {
		return err
	}
	if version >= 2 {
		t.CurrentLeaderEpoch, err = d.Int32()
		if err != nil {
			return err
		}
	}
	t.LeaderEpoch, err = d.Int32()
	if err != nil {
		return err
	}
	return err
}
