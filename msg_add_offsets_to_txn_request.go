// Code generated by kafka-protocol-gen. DO NOT EDIT.
//
// Copyright 2019 Matt Ho
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package kafka

import (
	"github.com/savaki/kafka/protocol"
	"github.com/savaki/kafka/sizeof"
)

// AddOffsetsToTxnRequest; ApiKey: 25, Versions: 0-1
type AddOffsetsToTxnRequest struct {
	TransactionalId string // The transactional id corresponding to the transaction. Versions: 0+
	ProducerId      int64  // Current producer id in use by the transactional id. Versions: 0+
	ProducerEpoch   int16  // Current epoch associated with the producer id. Versions: 0+
	GroupId         string // The unique group identifier. Versions: 0+
}

// size of AddOffsetsToTxnRequest; Versions: 0-1
func (t AddOffsetsToTxnRequest) size(version int16) int32 {
	var sz int32
	sz += sizeof.String(t.TransactionalId) // TransactionalId
	sz += sizeof.Int64                     // ProducerId
	sz += sizeof.Int16                     // ProducerEpoch
	sz += sizeof.String(t.GroupId)         // GroupId
	return sz
}

// encode AddOffsetsToTxnRequest; Versions: 0-1
func (t AddOffsetsToTxnRequest) encode(e *protocol.Encoder, version int16) {
	e.PutString(t.TransactionalId) // TransactionalId
	e.PutInt64(t.ProducerId)       // ProducerId
	e.PutInt16(t.ProducerEpoch)    // ProducerEpoch
	e.PutString(t.GroupId)         // GroupId
}

// decode AddOffsetsToTxnRequest; Versions: 0-1
func (t *AddOffsetsToTxnRequest) decode(d *protocol.Decoder, version int16) error {
	var err error
	t.TransactionalId, err = d.String()
	if err != nil {
		return err
	}
	t.ProducerId, err = d.Int64()
	if err != nil {
		return err
	}
	t.ProducerEpoch, err = d.Int16()
	if err != nil {
		return err
	}
	t.GroupId, err = d.String()
	if err != nil {
		return err
	}
	return err
}
