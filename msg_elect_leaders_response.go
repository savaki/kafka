// Code generated by kafka-protocol-gen. DO NOT EDIT.
//
// Copyright 2019 Matt Ho
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package kafka

import (
	"github.com/savaki/kafka/protocol"
	"github.com/savaki/kafka/sizeof"
)

// ElectLeadersResponse; ApiKey: 43, Versions: 0-2
type ElectLeadersResponse struct {
	ThrottleTimeMs         int32                     // The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota. Versions: 0+
	ErrorCode              int16                     // The top level response error code. Versions: 1+
	ReplicaElectionResults []ReplicaElectionResult43 // The election results, or an empty array if the requester did not have permission and the request asks for all partitions. Versions: 0+
}

// size of ElectLeadersResponse; Versions: 0-2
func (t ElectLeadersResponse) size(version int16) int32 {
	var sz int32
	sz += sizeof.Int32 // ThrottleTimeMs
	if version >= 1 {
		sz += sizeof.Int16 // ErrorCode
	}
	sz += sizeof.ArrayLength // ReplicaElectionResults
	for i := len(t.ReplicaElectionResults) - 1; i >= 0; i-- {
		sz += t.ReplicaElectionResults[i].size(version)
	}
	return sz
}

// encode ElectLeadersResponse; Versions: 0-2
func (t ElectLeadersResponse) encode(e *protocol.Encoder, version int16) {
	e.PutInt32(t.ThrottleTimeMs) // ThrottleTimeMs
	if version >= 1 {
		e.PutInt16(t.ErrorCode) // ErrorCode
	}
	// ReplicaElectionResults
	len2 := len(t.ReplicaElectionResults)
	e.PutArrayLength(len2)
	for i := 0; i < len2; i++ {
		t.ReplicaElectionResults[i].encode(e, version)
	}
}

// decode ElectLeadersResponse; Versions: 0-2
func (t *ElectLeadersResponse) decode(d *protocol.Decoder, version int16) error {
	var err error
	t.ThrottleTimeMs, err = d.Int32()
	if err != nil {
		return err
	}
	if version >= 1 {
		t.ErrorCode, err = d.Int16()
		if err != nil {
			return err
		}
	}
	// ReplicaElectionResults
	if n, err := d.ArrayLength(); err != nil {
		return err
	} else if n >= 0 {
		t.ReplicaElectionResults = make([]ReplicaElectionResult43, n)
		for i := 0; i < n; i++ {
			var item ReplicaElectionResult43
			if err := (&item).decode(d, version); err != nil {
				return err
			}
			t.ReplicaElectionResults[i] = item
		}
	}
	return err
}

type ReplicaElectionResult43 struct {
	Topic           string              // The topic name Versions: 0+
	PartitionResult []PartitionResult43 // The results for each partition Versions: 0+
}

// size of ReplicaElectionResult43; Versions: 0-2
func (t ReplicaElectionResult43) size(version int16) int32 {
	var sz int32
	sz += sizeof.String(t.Topic) // Topic
	sz += sizeof.ArrayLength     // PartitionResult
	for i := len(t.PartitionResult) - 1; i >= 0; i-- {
		sz += t.PartitionResult[i].size(version)
	}
	return sz
}

// encode ReplicaElectionResult43; Versions: 0-2
func (t ReplicaElectionResult43) encode(e *protocol.Encoder, version int16) {
	e.PutString(t.Topic) // Topic
	// PartitionResult
	len1 := len(t.PartitionResult)
	e.PutArrayLength(len1)
	for i := 0; i < len1; i++ {
		t.PartitionResult[i].encode(e, version)
	}
}

// decode ReplicaElectionResult43; Versions: 0-2
func (t *ReplicaElectionResult43) decode(d *protocol.Decoder, version int16) error {
	var err error
	t.Topic, err = d.String()
	if err != nil {
		return err
	}
	// PartitionResult
	if n, err := d.ArrayLength(); err != nil {
		return err
	} else if n >= 0 {
		t.PartitionResult = make([]PartitionResult43, n)
		for i := 0; i < n; i++ {
			var item PartitionResult43
			if err := (&item).decode(d, version); err != nil {
				return err
			}
			t.PartitionResult[i] = item
		}
	}
	return err
}

type PartitionResult43 struct {
	PartitionId  int32  // The partition id Versions: 0+
	ErrorCode    int16  // The result error, or zero if there was no error. Versions: 0+
	ErrorMessage string // The result message, or null if there was no error. Versions: 0+
}

// size of PartitionResult43; Versions: 0-2
func (t PartitionResult43) size(version int16) int32 {
	var sz int32
	sz += sizeof.Int32                  // PartitionId
	sz += sizeof.Int16                  // ErrorCode
	sz += sizeof.String(t.ErrorMessage) // ErrorMessage
	return sz
}

// encode PartitionResult43; Versions: 0-2
func (t PartitionResult43) encode(e *protocol.Encoder, version int16) {
	e.PutInt32(t.PartitionId)   // PartitionId
	e.PutInt16(t.ErrorCode)     // ErrorCode
	e.PutString(t.ErrorMessage) // ErrorMessage
}

// decode PartitionResult43; Versions: 0-2
func (t *PartitionResult43) decode(d *protocol.Decoder, version int16) error {
	var err error
	t.PartitionId, err = d.Int32()
	if err != nil {
		return err
	}
	t.ErrorCode, err = d.Int16()
	if err != nil {
		return err
	}
	t.ErrorMessage, err = d.String()
	if err != nil {
		return err
	}
	return err
}
