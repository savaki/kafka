// Code generated by kafka-protocol-gen. DO NOT EDIT.
//
// Copyright 2019 Matt Ho
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package kafka

import (
	"github.com/savaki/kafka/protocol"
	"github.com/savaki/kafka/sizeof"
)

// ProduceRequest; ApiKey: 0, Versions: 0-8
type ProduceRequest struct {
	TransactionalId string              // The transactional ID, or null if the producer is not transactional. Versions: 3+
	Acks            int16               // The number of acknowledgments the producer requires the leader to have received before considering a request complete. Allowed values: 0 for no acknowledgments, 1 for only the leader and -1 for the full ISR. Versions: 0+
	TimeoutMs       int32               // The timeout to await a response in miliseconds. Versions: 0+
	Topics          []TopicProduceData0 // Each topic to produce to. Versions: 0+
}

// size of ProduceRequest; Versions: 0-8
func (t ProduceRequest) size(version int16) int32 {
	var sz int32
	if version >= 3 {
		sz += sizeof.String(t.TransactionalId) // TransactionalId
	}
	sz += sizeof.Int16       // Acks
	sz += sizeof.Int32       // TimeoutMs
	sz += sizeof.ArrayLength // Topics
	for i := len(t.Topics) - 1; i >= 0; i-- {
		sz += t.Topics[i].size(version)
	}
	return sz
}

// encode ProduceRequest; Versions: 0-8
func (t ProduceRequest) encode(e *protocol.Encoder, version int16) {
	if version >= 3 {
		e.PutString(t.TransactionalId) // TransactionalId
	}
	e.PutInt16(t.Acks)      // Acks
	e.PutInt32(t.TimeoutMs) // TimeoutMs
	// Topics
	len3 := len(t.Topics)
	e.PutArrayLength(len3)
	for i := 0; i < len3; i++ {
		t.Topics[i].encode(e, version)
	}
}

// decode ProduceRequest; Versions: 0-8
func (t *ProduceRequest) decode(d *protocol.Decoder, version int16) error {
	var err error
	if version >= 3 {
		t.TransactionalId, err = d.String()
		if err != nil {
			return err
		}
	}
	t.Acks, err = d.Int16()
	if err != nil {
		return err
	}
	t.TimeoutMs, err = d.Int32()
	if err != nil {
		return err
	}
	// Topics
	if n, err := d.ArrayLength(); err != nil {
		return err
	} else if n >= 0 {
		t.Topics = make([]TopicProduceData0, n)
		for i := 0; i < n; i++ {
			var item TopicProduceData0
			if err := (&item).decode(d, version); err != nil {
				return err
			}
			t.Topics[i] = item
		}
	}
	return err
}

type TopicProduceData0 struct {
	Name       string                  // The topic name. Versions: 0+
	Partitions []PartitionProduceData0 // Each partition to produce to. Versions: 0+
}

// size of TopicProduceData0; Versions: 0-8
func (t TopicProduceData0) size(version int16) int32 {
	var sz int32
	sz += sizeof.String(t.Name) // Name
	sz += sizeof.ArrayLength    // Partitions
	for i := len(t.Partitions) - 1; i >= 0; i-- {
		sz += t.Partitions[i].size(version)
	}
	return sz
}

// encode TopicProduceData0; Versions: 0-8
func (t TopicProduceData0) encode(e *protocol.Encoder, version int16) {
	e.PutString(t.Name) // Name
	// Partitions
	len1 := len(t.Partitions)
	e.PutArrayLength(len1)
	for i := 0; i < len1; i++ {
		t.Partitions[i].encode(e, version)
	}
}

// decode TopicProduceData0; Versions: 0-8
func (t *TopicProduceData0) decode(d *protocol.Decoder, version int16) error {
	var err error
	t.Name, err = d.String()
	if err != nil {
		return err
	}
	// Partitions
	if n, err := d.ArrayLength(); err != nil {
		return err
	} else if n >= 0 {
		t.Partitions = make([]PartitionProduceData0, n)
		for i := 0; i < n; i++ {
			var item PartitionProduceData0
			if err := (&item).decode(d, version); err != nil {
				return err
			}
			t.Partitions[i] = item
		}
	}
	return err
}

type PartitionProduceData0 struct {
	PartitionIndex int32  // The partition index. Versions: 0+
	Records        []byte // The record data to be produced. Versions: 0+
}

// size of PartitionProduceData0; Versions: 0-8
func (t PartitionProduceData0) size(version int16) int32 {
	var sz int32
	sz += sizeof.Int32            // PartitionIndex
	sz += sizeof.Bytes(t.Records) // Records
	return sz
}

// encode PartitionProduceData0; Versions: 0-8
func (t PartitionProduceData0) encode(e *protocol.Encoder, version int16) {
	e.PutInt32(t.PartitionIndex) // PartitionIndex
	e.PutBytes(t.Records)        // Records
}

// decode PartitionProduceData0; Versions: 0-8
func (t *PartitionProduceData0) decode(d *protocol.Decoder, version int16) error {
	var err error
	t.PartitionIndex, err = d.Int32()
	if err != nil {
		return err
	}
	t.Records, err = d.Bytes()
	if err != nil {
		return err
	}
	return err
}
