// Code generated by kafka-protocol-gen. DO NOT EDIT.
//
// Copyright 2019 Matt Ho
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package kafka

import (
	"github.com/savaki/kafka/protocol"
	"github.com/savaki/kafka/sizeof"
)

// ControlledShutdownRequest; ApiKey: 7, Versions: 0-3
type ControlledShutdownRequest struct {
	BrokerId    int32 // The id of the broker for which controlled shutdown has been requested. Versions: 0+
	BrokerEpoch int64 // The broker epoch. Versions: 2+
}

// size of ControlledShutdownRequest; Versions: 0-3
func (t ControlledShutdownRequest) Size(version int16) int32 {
	var sz int32
	sz += sizeof.Int32 // BrokerId
	if version >= 2 {
		sz += sizeof.Int64 // BrokerEpoch
	}
	return sz
}

// encode ControlledShutdownRequest; Versions: 0-3
func (t ControlledShutdownRequest) Encode(e *protocol.Encoder, version int16) {
	e.PutInt32(t.BrokerId) // BrokerId
	if version >= 2 {
		e.PutInt64(t.BrokerEpoch) // BrokerEpoch
	}
}

// decode ControlledShutdownRequest; Versions: 0-3
func (t *ControlledShutdownRequest) Decode(d *protocol.Decoder, version int16) error {
	var err error
	t.BrokerId, err = d.Int32()
	if err != nil {
		return err
	}
	if version >= 2 {
		t.BrokerEpoch, err = d.Int64()
		if err != nil {
			return err
		}
	}
	return err
}
