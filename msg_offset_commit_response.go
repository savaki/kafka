// Code generated by kafka-protocol-gen. DO NOT EDIT.
//
// Copyright 2019 Matt Ho
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package kafka

import (
	"github.com/savaki/kafka/protocol"
	"github.com/savaki/kafka/sizeof"
)

// OffsetCommitResponse; ApiKey: 8, Versions: 0-8
type OffsetCommitResponse struct {
	ThrottleTimeMs int32                        // The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota. Versions: 3+
	Topics         []OffsetCommitResponseTopic8 // The responses for each topic. Versions: 0+
}

// size of OffsetCommitResponse; Versions: 0-8
func (t OffsetCommitResponse) size(version int16) int32 {
	var sz int32
	if version >= 3 {
		sz += sizeof.Int32 // ThrottleTimeMs
	}
	sz += sizeof.ArrayLength // Topics
	for i := len(t.Topics) - 1; i >= 0; i-- {
		sz += t.Topics[i].size(version)
	}
	return sz
}

// encode OffsetCommitResponse; Versions: 0-8
func (t OffsetCommitResponse) Encode(e *protocol.Encoder, version int16) {
	if version >= 3 {
		e.PutInt32(t.ThrottleTimeMs) // ThrottleTimeMs
	}
	// Topics
	len1 := len(t.Topics)
	e.PutArrayLength(len1)
	for i := 0; i < len1; i++ {
		t.Topics[i].Encode(e, version)
	}
}

// decode OffsetCommitResponse; Versions: 0-8
func (t *OffsetCommitResponse) Decode(d *protocol.Decoder, version int16) error {
	var err error
	if version >= 3 {
		t.ThrottleTimeMs, err = d.Int32()
		if err != nil {
			return err
		}
	}
	// Topics
	if n, err := d.ArrayLength(); err != nil {
		return err
	} else if n >= 0 {
		t.Topics = make([]OffsetCommitResponseTopic8, n)
		for i := 0; i < n; i++ {
			var item OffsetCommitResponseTopic8
			if err := (&item).Decode(d, version); err != nil {
				return err
			}
			t.Topics[i] = item
		}
	}
	return err
}

type OffsetCommitResponseTopic8 struct {
	Name       string                           // The topic name. Versions: 0+
	Partitions []OffsetCommitResponsePartition8 // The responses for each partition in the topic. Versions: 0+
}

// size of OffsetCommitResponseTopic8; Versions: 0-8
func (t OffsetCommitResponseTopic8) size(version int16) int32 {
	var sz int32
	sz += sizeof.String(t.Name) // Name
	sz += sizeof.ArrayLength    // Partitions
	for i := len(t.Partitions) - 1; i >= 0; i-- {
		sz += t.Partitions[i].size(version)
	}
	return sz
}

// encode OffsetCommitResponseTopic8; Versions: 0-8
func (t OffsetCommitResponseTopic8) Encode(e *protocol.Encoder, version int16) {
	e.PutString(t.Name) // Name
	// Partitions
	len1 := len(t.Partitions)
	e.PutArrayLength(len1)
	for i := 0; i < len1; i++ {
		t.Partitions[i].Encode(e, version)
	}
}

// decode OffsetCommitResponseTopic8; Versions: 0-8
func (t *OffsetCommitResponseTopic8) Decode(d *protocol.Decoder, version int16) error {
	var err error
	t.Name, err = d.String()
	if err != nil {
		return err
	}
	// Partitions
	if n, err := d.ArrayLength(); err != nil {
		return err
	} else if n >= 0 {
		t.Partitions = make([]OffsetCommitResponsePartition8, n)
		for i := 0; i < n; i++ {
			var item OffsetCommitResponsePartition8
			if err := (&item).Decode(d, version); err != nil {
				return err
			}
			t.Partitions[i] = item
		}
	}
	return err
}

type OffsetCommitResponsePartition8 struct {
	PartitionIndex int32 // The partition index. Versions: 0+
	ErrorCode      int16 // The error code, or 0 if there was no error. Versions: 0+
}

// size of OffsetCommitResponsePartition8; Versions: 0-8
func (t OffsetCommitResponsePartition8) size(version int16) int32 {
	var sz int32
	sz += sizeof.Int32 // PartitionIndex
	sz += sizeof.Int16 // ErrorCode
	return sz
}

// encode OffsetCommitResponsePartition8; Versions: 0-8
func (t OffsetCommitResponsePartition8) Encode(e *protocol.Encoder, version int16) {
	e.PutInt32(t.PartitionIndex) // PartitionIndex
	e.PutInt16(t.ErrorCode)      // ErrorCode
}

// decode OffsetCommitResponsePartition8; Versions: 0-8
func (t *OffsetCommitResponsePartition8) Decode(d *protocol.Decoder, version int16) error {
	var err error
	t.PartitionIndex, err = d.Int32()
	if err != nil {
		return err
	}
	t.ErrorCode, err = d.Int16()
	if err != nil {
		return err
	}
	return err
}
