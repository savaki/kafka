// Code generated by kafka-protocol-gen. DO NOT EDIT.
//
// Copyright 2019 Matt Ho
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package kafka

import (
	"github.com/savaki/kafka/protocol"
	"github.com/savaki/kafka/sizeof"
)

// RequestHeader; ApiKey: 0, Versions: 0-2
type RequestHeader struct {
	RequestApiKey     int16  // The API key of this request. Versions: 0+
	RequestApiVersion int16  // The API version of this request. Versions: 0+
	CorrelationId     int32  // The correlation ID of this request. Versions: 0+
	ClientId          string // The client ID string. Versions: 1+
}

// size of RequestHeader; Versions: 0-2
func (t RequestHeader) size(version int16) int32 {
	var sz int32
	sz += sizeof.Int16 // RequestApiKey
	sz += sizeof.Int16 // RequestApiVersion
	sz += sizeof.Int32 // CorrelationId
	if version >= 1 {
		sz += sizeof.String(t.ClientId) // ClientId
	}
	return sz
}

// encode RequestHeader; Versions: 0-2
func (t RequestHeader) Encode(e *protocol.Encoder, version int16) {
	e.PutInt16(t.RequestApiKey)     // RequestApiKey
	e.PutInt16(t.RequestApiVersion) // RequestApiVersion
	e.PutInt32(t.CorrelationId)     // CorrelationId
	if version >= 1 {
		e.PutString(t.ClientId) // ClientId
	}
}

// decode RequestHeader; Versions: 0-2
func (t *RequestHeader) Decode(d *protocol.Decoder, version int16) error {
	var err error
	t.RequestApiKey, err = d.Int16()
	if err != nil {
		return err
	}
	t.RequestApiVersion, err = d.Int16()
	if err != nil {
		return err
	}
	t.CorrelationId, err = d.Int32()
	if err != nil {
		return err
	}
	if version >= 1 {
		t.ClientId, err = d.String()
		if err != nil {
			return err
		}
	}
	return err
}
