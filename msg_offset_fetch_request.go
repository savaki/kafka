// Code generated by kafka-protocol-gen. DO NOT EDIT.
//
// Copyright 2019 Matt Ho
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package kafka

import (
	"github.com/savaki/kafka/protocol"
	"github.com/savaki/kafka/sizeof"
)

// OffsetFetchRequest; ApiKey: 9, Versions: 0-6
type OffsetFetchRequest struct {
	GroupId string                     // The group to fetch offsets for. Versions: 0+
	Topics  []OffsetFetchRequestTopic9 // Each topic we would like to fetch offsets for, or null to fetch offsets for all topics. Versions: 0+
}

// size of OffsetFetchRequest; Versions: 0-6
func (t OffsetFetchRequest) Size(version int16) int32 {
	var sz int32
	sz += sizeof.String(t.GroupId) // GroupId
	sz += sizeof.ArrayLength       // Topics
	for i := len(t.Topics) - 1; i >= 0; i-- {
		sz += t.Topics[i].Size(version)
	}
	return sz
}

// encode OffsetFetchRequest; Versions: 0-6
func (t OffsetFetchRequest) Encode(e *protocol.Encoder, version int16) {
	e.PutString(t.GroupId) // GroupId
	// Topics
	len1 := len(t.Topics)
	e.PutArrayLength(len1)
	for i := 0; i < len1; i++ {
		t.Topics[i].Encode(e, version)
	}
}

// decode OffsetFetchRequest; Versions: 0-6
func (t *OffsetFetchRequest) Decode(d *protocol.Decoder, version int16) error {
	var err error
	t.GroupId, err = d.String()
	if err != nil {
		return err
	}
	// Topics
	if n, err := d.ArrayLength(); err != nil {
		return err
	} else if n >= 0 {
		t.Topics = make([]OffsetFetchRequestTopic9, n)
		for i := 0; i < n; i++ {
			var item OffsetFetchRequestTopic9
			if err := (&item).Decode(d, version); err != nil {
				return err
			}
			t.Topics[i] = item
		}
	}
	return err
}

type OffsetFetchRequestTopic9 struct {
	Name             string  // The topic name. Versions: 0+
	PartitionIndexes []int32 // The partition indexes we would like to fetch offsets for. Versions: 0+
}

// size of OffsetFetchRequestTopic9; Versions: 0-6
func (t OffsetFetchRequestTopic9) Size(version int16) int32 {
	var sz int32
	sz += sizeof.String(t.Name)                 // Name
	sz += sizeof.Int32Array(t.PartitionIndexes) // PartitionIndexes
	return sz
}

// encode OffsetFetchRequestTopic9; Versions: 0-6
func (t OffsetFetchRequestTopic9) Encode(e *protocol.Encoder, version int16) {
	e.PutString(t.Name)                 // Name
	e.PutInt32Array(t.PartitionIndexes) // PartitionIndexes
}

// decode OffsetFetchRequestTopic9; Versions: 0-6
func (t *OffsetFetchRequestTopic9) Decode(d *protocol.Decoder, version int16) error {
	var err error
	t.Name, err = d.String()
	if err != nil {
		return err
	}
	t.PartitionIndexes, err = d.Int32Array()
	if err != nil {
		return err
	}
	return err
}
