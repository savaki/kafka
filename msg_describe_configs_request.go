// Code generated by kafka-protocol-gen. DO NOT EDIT.
//
// Copyright 2019 Matt Ho
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package kafka

import (
	"github.com/savaki/kafka/protocol"
	"github.com/savaki/kafka/sizeof"
)

// DescribeConfigsRequest; ApiKey: 32, Versions: 0-2
type DescribeConfigsRequest struct {
	Resources      []DescribeConfigsResource32 // The resources whose configurations we want to describe. Versions: 0+
	IncludeSynoyms bool                        // True if we should include all synonyms. Versions: 1+
}

// size of DescribeConfigsRequest; Versions: 0-2
func (t DescribeConfigsRequest) size(version int16) int32 {
	var sz int32
	sz += sizeof.ArrayLength // Resources
	for i := len(t.Resources) - 1; i >= 0; i-- {
		sz += t.Resources[i].size(version)
	}
	if version >= 1 {
		sz += sizeof.Bool // IncludeSynoyms
	}
	return sz
}

// encode DescribeConfigsRequest; Versions: 0-2
func (t DescribeConfigsRequest) Encode(e *protocol.Encoder, version int16) {
	// Resources
	len0 := len(t.Resources)
	e.PutArrayLength(len0)
	for i := 0; i < len0; i++ {
		t.Resources[i].Encode(e, version)
	}
	if version >= 1 {
		e.PutBool(t.IncludeSynoyms) // IncludeSynoyms
	}
}

// decode DescribeConfigsRequest; Versions: 0-2
func (t *DescribeConfigsRequest) Decode(d *protocol.Decoder, version int16) error {
	var err error
	// Resources
	if n, err := d.ArrayLength(); err != nil {
		return err
	} else if n >= 0 {
		t.Resources = make([]DescribeConfigsResource32, n)
		for i := 0; i < n; i++ {
			var item DescribeConfigsResource32
			if err := (&item).Decode(d, version); err != nil {
				return err
			}
			t.Resources[i] = item
		}
	}
	if version >= 1 {
		t.IncludeSynoyms, err = d.Bool()
		if err != nil {
			return err
		}
	}
	return err
}

type DescribeConfigsResource32 struct {
	ResourceType      int8     // The resource type. Versions: 0+
	ResourceName      string   // The resource name. Versions: 0+
	ConfigurationKeys []string // The configuration keys to list, or null to list all configuration keys. Versions: 0+
}

// size of DescribeConfigsResource32; Versions: 0-2
func (t DescribeConfigsResource32) size(version int16) int32 {
	var sz int32
	sz += sizeof.Int8                             // ResourceType
	sz += sizeof.String(t.ResourceName)           // ResourceName
	sz += sizeof.StringArray(t.ConfigurationKeys) // ConfigurationKeys
	return sz
}

// encode DescribeConfigsResource32; Versions: 0-2
func (t DescribeConfigsResource32) Encode(e *protocol.Encoder, version int16) {
	e.PutInt8(t.ResourceType)             // ResourceType
	e.PutString(t.ResourceName)           // ResourceName
	e.PutStringArray(t.ConfigurationKeys) // ConfigurationKeys
}

// decode DescribeConfigsResource32; Versions: 0-2
func (t *DescribeConfigsResource32) Decode(d *protocol.Decoder, version int16) error {
	var err error
	t.ResourceType, err = d.Int8()
	if err != nil {
		return err
	}
	t.ResourceName, err = d.String()
	if err != nil {
		return err
	}
	t.ConfigurationKeys, err = d.StringArray()
	if err != nil {
		return err
	}
	return err
}
