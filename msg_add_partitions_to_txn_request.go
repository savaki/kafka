// Code generated by kafka-protocol-gen. DO NOT EDIT.
//
// Copyright 2019 Matt Ho
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package kafka

import (
	"github.com/savaki/kafka/protocol"
	"github.com/savaki/kafka/sizeof"
)

// AddPartitionsToTxnRequest; ApiKey: 24, Versions: 0-1
type AddPartitionsToTxnRequest struct {
	TransactionalId string                      // The transactional id corresponding to the transaction. Versions: 0+
	ProducerId      int64                       // Current producer id in use by the transactional id. Versions: 0+
	ProducerEpoch   int16                       // Current epoch associated with the producer id. Versions: 0+
	Topics          []AddPartitionsToTxnTopic24 // The partitions to add to the transation. Versions: 0+
}

// size of AddPartitionsToTxnRequest; Versions: 0-1
func (t AddPartitionsToTxnRequest) size(version int16) int32 {
	var sz int32
	sz += sizeof.String(t.TransactionalId) // TransactionalId
	sz += sizeof.Int64                     // ProducerId
	sz += sizeof.Int16                     // ProducerEpoch
	sz += sizeof.ArrayLength               // Topics
	for i := len(t.Topics) - 1; i >= 0; i-- {
		sz += t.Topics[i].size(version)
	}
	return sz
}

// encode AddPartitionsToTxnRequest; Versions: 0-1
func (t AddPartitionsToTxnRequest) encode(e *protocol.Encoder, version int16) {
	e.PutString(t.TransactionalId) // TransactionalId
	e.PutInt64(t.ProducerId)       // ProducerId
	e.PutInt16(t.ProducerEpoch)    // ProducerEpoch
	// Topics
	len3 := len(t.Topics)
	e.PutArrayLength(len3)
	for i := 0; i < len3; i++ {
		t.Topics[i].encode(e, version)
	}
}

// decode AddPartitionsToTxnRequest; Versions: 0-1
func (t *AddPartitionsToTxnRequest) decode(d *protocol.Decoder, version int16) error {
	var err error
	t.TransactionalId, err = d.String()
	if err != nil {
		return err
	}
	t.ProducerId, err = d.Int64()
	if err != nil {
		return err
	}
	t.ProducerEpoch, err = d.Int16()
	if err != nil {
		return err
	}
	// Topics
	if n, err := d.ArrayLength(); err != nil {
		return err
	} else if n >= 0 {
		t.Topics = make([]AddPartitionsToTxnTopic24, n)
		for i := 0; i < n; i++ {
			var item AddPartitionsToTxnTopic24
			if err := (&item).decode(d, version); err != nil {
				return err
			}
			t.Topics[i] = item
		}
	}
	return err
}

type AddPartitionsToTxnTopic24 struct {
	Name       string  // The name of the topic. Versions: 0+
	Partitions []int32 // The partition indexes to add to the transaction Versions: 0+
}

// size of AddPartitionsToTxnTopic24; Versions: 0-1
func (t AddPartitionsToTxnTopic24) size(version int16) int32 {
	var sz int32
	sz += sizeof.String(t.Name)           // Name
	sz += sizeof.Int32Array(t.Partitions) // Partitions
	return sz
}

// encode AddPartitionsToTxnTopic24; Versions: 0-1
func (t AddPartitionsToTxnTopic24) encode(e *protocol.Encoder, version int16) {
	e.PutString(t.Name)           // Name
	e.PutInt32Array(t.Partitions) // Partitions
}

// decode AddPartitionsToTxnTopic24; Versions: 0-1
func (t *AddPartitionsToTxnTopic24) decode(d *protocol.Decoder, version int16) error {
	var err error
	t.Name, err = d.String()
	if err != nil {
		return err
	}
	t.Partitions, err = d.Int32Array()
	if err != nil {
		return err
	}
	return err
}
