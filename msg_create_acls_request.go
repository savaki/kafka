// Code generated by kafka-protocol-gen. DO NOT EDIT.
//
// Copyright 2019 Matt Ho
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package kafka

import (
	"github.com/savaki/kafka/protocol"
	"github.com/savaki/kafka/sizeof"
)

// CreateAclsRequest; ApiKey: 30, Versions: 0-1
type CreateAclsRequest struct {
	Creations []CreatableAcl30 // The ACLs that we want to create. Versions: 0+
}

// size of CreateAclsRequest; Versions: 0-1
func (t CreateAclsRequest) Size(version int16) int32 {
	var sz int32
	sz += sizeof.ArrayLength // Creations
	for i := len(t.Creations) - 1; i >= 0; i-- {
		sz += t.Creations[i].Size(version)
	}
	return sz
}

// encode CreateAclsRequest; Versions: 0-1
func (t CreateAclsRequest) Encode(e *protocol.Encoder, version int16) {
	// Creations
	len0 := len(t.Creations)
	e.PutArrayLength(len0)
	for i := 0; i < len0; i++ {
		t.Creations[i].Encode(e, version)
	}
}

// decode CreateAclsRequest; Versions: 0-1
func (t *CreateAclsRequest) Decode(d *protocol.Decoder, version int16) error {
	var err error
	// Creations
	if n, err := d.ArrayLength(); err != nil {
		return err
	} else if n >= 0 {
		t.Creations = make([]CreatableAcl30, n)
		for i := 0; i < n; i++ {
			var item CreatableAcl30
			if err := (&item).Decode(d, version); err != nil {
				return err
			}
			t.Creations[i] = item
		}
	}
	return err
}

type CreatableAcl30 struct {
	ResourceType        int8   // The type of the resource. Versions: 0+
	ResourceName        string // The resource name for the ACL. Versions: 0+
	ResourcePatternType int8   // The pattern type for the ACL. Versions: 1+
	Principal           string // The principal for the ACL. Versions: 0+
	Host                string // The host for the ACL. Versions: 0+
	Operation           int8   // The operation type for the ACL (read, write, etc.). Versions: 0+
	PermissionType      int8   // The permission type for the ACL (allow, deny, etc.). Versions: 0+
}

// size of CreatableAcl30; Versions: 0-1
func (t CreatableAcl30) Size(version int16) int32 {
	var sz int32
	sz += sizeof.Int8                   // ResourceType
	sz += sizeof.String(t.ResourceName) // ResourceName
	if version >= 1 {
		sz += sizeof.Int8 // ResourcePatternType
	}
	sz += sizeof.String(t.Principal) // Principal
	sz += sizeof.String(t.Host)      // Host
	sz += sizeof.Int8                // Operation
	sz += sizeof.Int8                // PermissionType
	return sz
}

// encode CreatableAcl30; Versions: 0-1
func (t CreatableAcl30) Encode(e *protocol.Encoder, version int16) {
	e.PutInt8(t.ResourceType)   // ResourceType
	e.PutString(t.ResourceName) // ResourceName
	if version >= 1 {
		e.PutInt8(t.ResourcePatternType) // ResourcePatternType
	}
	e.PutString(t.Principal)    // Principal
	e.PutString(t.Host)         // Host
	e.PutInt8(t.Operation)      // Operation
	e.PutInt8(t.PermissionType) // PermissionType
}

// decode CreatableAcl30; Versions: 0-1
func (t *CreatableAcl30) Decode(d *protocol.Decoder, version int16) error {
	var err error
	t.ResourceType, err = d.Int8()
	if err != nil {
		return err
	}
	t.ResourceName, err = d.String()
	if err != nil {
		return err
	}
	if version >= 1 {
		t.ResourcePatternType, err = d.Int8()
		if err != nil {
			return err
		}
	}
	t.Principal, err = d.String()
	if err != nil {
		return err
	}
	t.Host, err = d.String()
	if err != nil {
		return err
	}
	t.Operation, err = d.Int8()
	if err != nil {
		return err
	}
	t.PermissionType, err = d.Int8()
	if err != nil {
		return err
	}
	return err
}
