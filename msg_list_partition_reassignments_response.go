// Code generated by kafka-protocol-gen. DO NOT EDIT.
//
// Copyright 2019 Matt Ho
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package kafka

import (
	"github.com/savaki/kafka/protocol"
	"github.com/savaki/kafka/sizeof"
)

// ListPartitionReassignmentsResponse; ApiKey: 46, Versions: 0
type ListPartitionReassignmentsResponse struct {
	ThrottleTimeMs int32                        // The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota. Versions: 0+
	ErrorCode      int16                        // The top-level error code, or 0 if there was no error Versions: 0+
	ErrorMessage   string                       // The top-level error message, or null if there was no error. Versions: 0+
	Topics         []OngoingTopicReassignment46 // The ongoing reassignments for each topic. Versions: 0+
}

// size of ListPartitionReassignmentsResponse; Versions: 0
func (t ListPartitionReassignmentsResponse) size(version int16) int32 {
	var sz int32
	sz += sizeof.Int32                  // ThrottleTimeMs
	sz += sizeof.Int16                  // ErrorCode
	sz += sizeof.String(t.ErrorMessage) // ErrorMessage
	sz += sizeof.ArrayLength            // Topics
	for i := len(t.Topics) - 1; i >= 0; i-- {
		sz += t.Topics[i].size(version)
	}
	return sz
}

// encode ListPartitionReassignmentsResponse; Versions: 0
func (t ListPartitionReassignmentsResponse) Encode(e *protocol.Encoder, version int16) {
	e.PutInt32(t.ThrottleTimeMs) // ThrottleTimeMs
	e.PutInt16(t.ErrorCode)      // ErrorCode
	e.PutString(t.ErrorMessage)  // ErrorMessage
	// Topics
	len3 := len(t.Topics)
	e.PutArrayLength(len3)
	for i := 0; i < len3; i++ {
		t.Topics[i].Encode(e, version)
	}
}

// decode ListPartitionReassignmentsResponse; Versions: 0
func (t *ListPartitionReassignmentsResponse) Decode(d *protocol.Decoder, version int16) error {
	var err error
	t.ThrottleTimeMs, err = d.Int32()
	if err != nil {
		return err
	}
	t.ErrorCode, err = d.Int16()
	if err != nil {
		return err
	}
	t.ErrorMessage, err = d.String()
	if err != nil {
		return err
	}
	// Topics
	if n, err := d.ArrayLength(); err != nil {
		return err
	} else if n >= 0 {
		t.Topics = make([]OngoingTopicReassignment46, n)
		for i := 0; i < n; i++ {
			var item OngoingTopicReassignment46
			if err := (&item).Decode(d, version); err != nil {
				return err
			}
			t.Topics[i] = item
		}
	}
	return err
}

type OngoingTopicReassignment46 struct {
	Name       string                           // The topic name. Versions: 0+
	Partitions []OngoingPartitionReassignment46 // The ongoing reassignments for each partition. Versions: 0+
}

// size of OngoingTopicReassignment46; Versions: 0
func (t OngoingTopicReassignment46) size(version int16) int32 {
	var sz int32
	sz += sizeof.String(t.Name) // Name
	sz += sizeof.ArrayLength    // Partitions
	for i := len(t.Partitions) - 1; i >= 0; i-- {
		sz += t.Partitions[i].size(version)
	}
	return sz
}

// encode OngoingTopicReassignment46; Versions: 0
func (t OngoingTopicReassignment46) Encode(e *protocol.Encoder, version int16) {
	e.PutString(t.Name) // Name
	// Partitions
	len1 := len(t.Partitions)
	e.PutArrayLength(len1)
	for i := 0; i < len1; i++ {
		t.Partitions[i].Encode(e, version)
	}
}

// decode OngoingTopicReassignment46; Versions: 0
func (t *OngoingTopicReassignment46) Decode(d *protocol.Decoder, version int16) error {
	var err error
	t.Name, err = d.String()
	if err != nil {
		return err
	}
	// Partitions
	if n, err := d.ArrayLength(); err != nil {
		return err
	} else if n >= 0 {
		t.Partitions = make([]OngoingPartitionReassignment46, n)
		for i := 0; i < n; i++ {
			var item OngoingPartitionReassignment46
			if err := (&item).Decode(d, version); err != nil {
				return err
			}
			t.Partitions[i] = item
		}
	}
	return err
}

type OngoingPartitionReassignment46 struct {
	PartitionIndex   int32   // The index of the partition. Versions: 0+
	Replicas         []int32 // The current replica set. Versions: 0+
	AddingReplicas   []int32 // The set of replicas we are currently adding. Versions: 0+
	RemovingReplicas []int32 // The set of replicas we are currently removing. Versions: 0+
}

// size of OngoingPartitionReassignment46; Versions: 0
func (t OngoingPartitionReassignment46) size(version int16) int32 {
	var sz int32
	sz += sizeof.Int32                          // PartitionIndex
	sz += sizeof.Int32Array(t.Replicas)         // Replicas
	sz += sizeof.Int32Array(t.AddingReplicas)   // AddingReplicas
	sz += sizeof.Int32Array(t.RemovingReplicas) // RemovingReplicas
	return sz
}

// encode OngoingPartitionReassignment46; Versions: 0
func (t OngoingPartitionReassignment46) Encode(e *protocol.Encoder, version int16) {
	e.PutInt32(t.PartitionIndex)        // PartitionIndex
	e.PutInt32Array(t.Replicas)         // Replicas
	e.PutInt32Array(t.AddingReplicas)   // AddingReplicas
	e.PutInt32Array(t.RemovingReplicas) // RemovingReplicas
}

// decode OngoingPartitionReassignment46; Versions: 0
func (t *OngoingPartitionReassignment46) Decode(d *protocol.Decoder, version int16) error {
	var err error
	t.PartitionIndex, err = d.Int32()
	if err != nil {
		return err
	}
	t.Replicas, err = d.Int32Array()
	if err != nil {
		return err
	}
	t.AddingReplicas, err = d.Int32Array()
	if err != nil {
		return err
	}
	t.RemovingReplicas, err = d.Int32Array()
	if err != nil {
		return err
	}
	return err
}
