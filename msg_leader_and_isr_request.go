// Code generated by kafka-protocol-gen. DO NOT EDIT.
//
// Copyright 2019 Matt Ho
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package kafka

import (
	"github.com/savaki/kafka/protocol"
	"github.com/savaki/kafka/sizeof"
)

// LeaderAndIsrRequest; ApiKey: 4, Versions: 0-4
type LeaderAndIsrRequest struct {
	ControllerId             int32                         // The current controller ID. Versions: 0+
	ControllerEpoch          int32                         // The current controller epoch. Versions: 0+
	BrokerEpoch              int64                         // The current broker epoch. Versions: 2+
	UngroupedPartitionStates []LeaderAndIsrPartitionState4 // The state of each partition, in a v0 or v1 message. Versions: 0-1
	TopicStates              []LeaderAndIsrTopicState4     // Each topic. Versions: 2+
	LiveLeaders              []LeaderAndIsrLiveLeader4     // The current live leaders. Versions: 0+
}

// size of LeaderAndIsrRequest; Versions: 0-4
func (t LeaderAndIsrRequest) Size(version int16) int32 {
	var sz int32
	sz += sizeof.Int32 // ControllerId
	sz += sizeof.Int32 // ControllerEpoch
	if version >= 2 {
		sz += sizeof.Int64 // BrokerEpoch
	}
	if version >= 0 && version <= 1 {
		sz += sizeof.ArrayLength // UngroupedPartitionStates
		for i := len(t.UngroupedPartitionStates) - 1; i >= 0; i-- {
			sz += t.UngroupedPartitionStates[i].Size(version)
		}
	}
	if version >= 2 {
		sz += sizeof.ArrayLength // TopicStates
		for i := len(t.TopicStates) - 1; i >= 0; i-- {
			sz += t.TopicStates[i].Size(version)
		}
	}
	sz += sizeof.ArrayLength // LiveLeaders
	for i := len(t.LiveLeaders) - 1; i >= 0; i-- {
		sz += t.LiveLeaders[i].Size(version)
	}
	return sz
}

// encode LeaderAndIsrRequest; Versions: 0-4
func (t LeaderAndIsrRequest) Encode(e *protocol.Encoder, version int16) {
	e.PutInt32(t.ControllerId)    // ControllerId
	e.PutInt32(t.ControllerEpoch) // ControllerEpoch
	if version >= 2 {
		e.PutInt64(t.BrokerEpoch) // BrokerEpoch
	}
	if version >= 0 && version <= 1 {
		// UngroupedPartitionStates
		len3 := len(t.UngroupedPartitionStates)
		e.PutArrayLength(len3)
		for i := 0; i < len3; i++ {
			t.UngroupedPartitionStates[i].Encode(e, version)
		}
	}
	if version >= 2 {
		// TopicStates
		len4 := len(t.TopicStates)
		e.PutArrayLength(len4)
		for i := 0; i < len4; i++ {
			t.TopicStates[i].Encode(e, version)
		}
	}
	// LiveLeaders
	len5 := len(t.LiveLeaders)
	e.PutArrayLength(len5)
	for i := 0; i < len5; i++ {
		t.LiveLeaders[i].Encode(e, version)
	}
}

// decode LeaderAndIsrRequest; Versions: 0-4
func (t *LeaderAndIsrRequest) Decode(d *protocol.Decoder, version int16) error {
	var err error
	t.ControllerId, err = d.Int32()
	if err != nil {
		return err
	}
	t.ControllerEpoch, err = d.Int32()
	if err != nil {
		return err
	}
	if version >= 2 {
		t.BrokerEpoch, err = d.Int64()
		if err != nil {
			return err
		}
	}
	if version >= 0 && version <= 1 {
		// UngroupedPartitionStates
		if n, err := d.ArrayLength(); err != nil {
			return err
		} else if n >= 0 {
			t.UngroupedPartitionStates = make([]LeaderAndIsrPartitionState4, n)
			for i := 0; i < n; i++ {
				var item LeaderAndIsrPartitionState4
				if err := (&item).Decode(d, version); err != nil {
					return err
				}
				t.UngroupedPartitionStates[i] = item
			}
		}
	}
	if version >= 2 {
		// TopicStates
		if n, err := d.ArrayLength(); err != nil {
			return err
		} else if n >= 0 {
			t.TopicStates = make([]LeaderAndIsrTopicState4, n)
			for i := 0; i < n; i++ {
				var item LeaderAndIsrTopicState4
				if err := (&item).Decode(d, version); err != nil {
					return err
				}
				t.TopicStates[i] = item
			}
		}
	}
	// LiveLeaders
	if n, err := d.ArrayLength(); err != nil {
		return err
	} else if n >= 0 {
		t.LiveLeaders = make([]LeaderAndIsrLiveLeader4, n)
		for i := 0; i < n; i++ {
			var item LeaderAndIsrLiveLeader4
			if err := (&item).Decode(d, version); err != nil {
				return err
			}
			t.LiveLeaders[i] = item
		}
	}
	return err
}

type LeaderAndIsrTopicState4 struct {
	TopicName       string                        // The topic name. Versions: 2+
	PartitionStates []LeaderAndIsrPartitionState4 // The state of each partition Versions: 2+
}

// size of LeaderAndIsrTopicState4; Versions: 0-4
func (t LeaderAndIsrTopicState4) Size(version int16) int32 {
	var sz int32
	if version >= 2 {
		sz += sizeof.String(t.TopicName) // TopicName
	}
	if version >= 2 {
		sz += sizeof.ArrayLength // PartitionStates
		for i := len(t.PartitionStates) - 1; i >= 0; i-- {
			sz += t.PartitionStates[i].Size(version)
		}
	}
	return sz
}

// encode LeaderAndIsrTopicState4; Versions: 0-4
func (t LeaderAndIsrTopicState4) Encode(e *protocol.Encoder, version int16) {
	if version >= 2 {
		e.PutString(t.TopicName) // TopicName
	}
	if version >= 2 {
		// PartitionStates
		len1 := len(t.PartitionStates)
		e.PutArrayLength(len1)
		for i := 0; i < len1; i++ {
			t.PartitionStates[i].Encode(e, version)
		}
	}
}

// decode LeaderAndIsrTopicState4; Versions: 0-4
func (t *LeaderAndIsrTopicState4) Decode(d *protocol.Decoder, version int16) error {
	var err error
	if version >= 2 {
		t.TopicName, err = d.String()
		if err != nil {
			return err
		}
	}
	if version >= 2 {
		// PartitionStates
		if n, err := d.ArrayLength(); err != nil {
			return err
		} else if n >= 0 {
			t.PartitionStates = make([]LeaderAndIsrPartitionState4, n)
			for i := 0; i < n; i++ {
				var item LeaderAndIsrPartitionState4
				if err := (&item).Decode(d, version); err != nil {
					return err
				}
				t.PartitionStates[i] = item
			}
		}
	}
	return err
}

type LeaderAndIsrLiveLeader4 struct {
	BrokerId int32  // The leader's broker ID. Versions: 0+
	HostName string // The leader's hostname. Versions: 0+
	Port     int32  // The leader's port. Versions: 0+
}

// size of LeaderAndIsrLiveLeader4; Versions: 0-4
func (t LeaderAndIsrLiveLeader4) Size(version int16) int32 {
	var sz int32
	sz += sizeof.Int32              // BrokerId
	sz += sizeof.String(t.HostName) // HostName
	sz += sizeof.Int32              // Port
	return sz
}

// encode LeaderAndIsrLiveLeader4; Versions: 0-4
func (t LeaderAndIsrLiveLeader4) Encode(e *protocol.Encoder, version int16) {
	e.PutInt32(t.BrokerId)  // BrokerId
	e.PutString(t.HostName) // HostName
	e.PutInt32(t.Port)      // Port
}

// decode LeaderAndIsrLiveLeader4; Versions: 0-4
func (t *LeaderAndIsrLiveLeader4) Decode(d *protocol.Decoder, version int16) error {
	var err error
	t.BrokerId, err = d.Int32()
	if err != nil {
		return err
	}
	t.HostName, err = d.String()
	if err != nil {
		return err
	}
	t.Port, err = d.Int32()
	if err != nil {
		return err
	}
	return err
}

type LeaderAndIsrPartitionState4 struct {
	TopicName        string  // The topic name.  This is only present in v0 or v1. Versions: 0-1
	PartitionIndex   int32   // The partition index. Versions: 0+
	ControllerEpoch  int32   // The controller epoch. Versions: 0+
	Leader           int32   // The broker ID of the leader. Versions: 0+
	LeaderEpoch      int32   // The leader epoch. Versions: 0+
	Isr              []int32 // The in-sync replica IDs. Versions: 0+
	ZkVersion        int32   // The ZooKeeper version. Versions: 0+
	Replicas         []int32 // The replica IDs. Versions: 0+
	AddingReplicas   []int32 // The replica IDs that we are adding this partition to, or null if no replicas are being added. Versions: 3+
	RemovingReplicas []int32 // The replica IDs that we are removing this partition from, or null if no replicas are being removed. Versions: 3+
	IsNew            bool    // Whether the replica should have existed on the broker or not. Versions: 1+
}

// size of LeaderAndIsrPartitionState4; Versions: 0-4
func (t LeaderAndIsrPartitionState4) Size(version int16) int32 {
	var sz int32
	if version >= 0 && version <= 1 {
		sz += sizeof.String(t.TopicName) // TopicName
	}
	sz += sizeof.Int32                  // PartitionIndex
	sz += sizeof.Int32                  // ControllerEpoch
	sz += sizeof.Int32                  // Leader
	sz += sizeof.Int32                  // LeaderEpoch
	sz += sizeof.Int32Array(t.Isr)      // Isr
	sz += sizeof.Int32                  // ZkVersion
	sz += sizeof.Int32Array(t.Replicas) // Replicas
	if version >= 3 {
		sz += sizeof.Int32Array(t.AddingReplicas) // AddingReplicas
	}
	if version >= 3 {
		sz += sizeof.Int32Array(t.RemovingReplicas) // RemovingReplicas
	}
	if version >= 1 {
		sz += sizeof.Bool // IsNew
	}
	return sz
}

// encode LeaderAndIsrPartitionState4; Versions: 0-4
func (t LeaderAndIsrPartitionState4) Encode(e *protocol.Encoder, version int16) {
	if version >= 0 && version <= 1 {
		e.PutString(t.TopicName) // TopicName
	}
	e.PutInt32(t.PartitionIndex)  // PartitionIndex
	e.PutInt32(t.ControllerEpoch) // ControllerEpoch
	e.PutInt32(t.Leader)          // Leader
	e.PutInt32(t.LeaderEpoch)     // LeaderEpoch
	e.PutInt32Array(t.Isr)        // Isr
	e.PutInt32(t.ZkVersion)       // ZkVersion
	e.PutInt32Array(t.Replicas)   // Replicas
	if version >= 3 {
		e.PutInt32Array(t.AddingReplicas) // AddingReplicas
	}
	if version >= 3 {
		e.PutInt32Array(t.RemovingReplicas) // RemovingReplicas
	}
	if version >= 1 {
		e.PutBool(t.IsNew) // IsNew
	}
}

// decode LeaderAndIsrPartitionState4; Versions: 0-4
func (t *LeaderAndIsrPartitionState4) Decode(d *protocol.Decoder, version int16) error {
	var err error
	if version >= 0 && version <= 1 {
		t.TopicName, err = d.String()
		if err != nil {
			return err
		}
	}
	t.PartitionIndex, err = d.Int32()
	if err != nil {
		return err
	}
	t.ControllerEpoch, err = d.Int32()
	if err != nil {
		return err
	}
	t.Leader, err = d.Int32()
	if err != nil {
		return err
	}
	t.LeaderEpoch, err = d.Int32()
	if err != nil {
		return err
	}
	t.Isr, err = d.Int32Array()
	if err != nil {
		return err
	}
	t.ZkVersion, err = d.Int32()
	if err != nil {
		return err
	}
	t.Replicas, err = d.Int32Array()
	if err != nil {
		return err
	}
	if version >= 3 {
		t.AddingReplicas, err = d.Int32Array()
		if err != nil {
			return err
		}
	}
	if version >= 3 {
		t.RemovingReplicas, err = d.Int32Array()
		if err != nil {
			return err
		}
	}
	if version >= 1 {
		t.IsNew, err = d.Bool()
		if err != nil {
			return err
		}
	}
	return err
}
