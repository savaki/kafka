// Code generated by kafka-protocol-gen. DO NOT EDIT.
//
// Copyright 2019 Matt Ho
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package kafka

import (
	"github.com/savaki/kafka/protocol"
	"github.com/savaki/kafka/sizeof"
)

// TxnOffsetCommitRequest; ApiKey: 28, Versions: 0-2
type TxnOffsetCommitRequest struct {
	TransactionalId string                          // The ID of the transaction. Versions: 0+
	GroupId         string                          // The ID of the group. Versions: 0+
	ProducerId      int64                           // The current producer ID in use by the transactional ID. Versions: 0+
	ProducerEpoch   int16                           // The current epoch associated with the producer ID. Versions: 0+
	Topics          []TxnOffsetCommitRequestTopic28 // Each topic that we want to committ offsets for. Versions: 0+
}

// size of TxnOffsetCommitRequest; Versions: 0-2
func (t TxnOffsetCommitRequest) size(version int16) int32 {
	var sz int32
	sz += sizeof.String(t.TransactionalId) // TransactionalId
	sz += sizeof.String(t.GroupId)         // GroupId
	sz += sizeof.Int64                     // ProducerId
	sz += sizeof.Int16                     // ProducerEpoch
	sz += sizeof.ArrayLength               // Topics
	for i := len(t.Topics) - 1; i >= 0; i-- {
		sz += t.Topics[i].size(version)
	}
	return sz
}

// encode TxnOffsetCommitRequest; Versions: 0-2
func (t TxnOffsetCommitRequest) encode(e *protocol.Encoder, version int16) {
	e.PutString(t.TransactionalId) // TransactionalId
	e.PutString(t.GroupId)         // GroupId
	e.PutInt64(t.ProducerId)       // ProducerId
	e.PutInt16(t.ProducerEpoch)    // ProducerEpoch
	// Topics
	len4 := len(t.Topics)
	e.PutArrayLength(len4)
	for i := 0; i < len4; i++ {
		t.Topics[i].encode(e, version)
	}
}

// decode TxnOffsetCommitRequest; Versions: 0-2
func (t *TxnOffsetCommitRequest) decode(d *protocol.Decoder, version int16) error {
	var err error
	t.TransactionalId, err = d.String()
	if err != nil {
		return err
	}
	t.GroupId, err = d.String()
	if err != nil {
		return err
	}
	t.ProducerId, err = d.Int64()
	if err != nil {
		return err
	}
	t.ProducerEpoch, err = d.Int16()
	if err != nil {
		return err
	}
	// Topics
	if n, err := d.ArrayLength(); err != nil {
		return err
	} else if n >= 0 {
		t.Topics = make([]TxnOffsetCommitRequestTopic28, n)
		for i := 0; i < n; i++ {
			var item TxnOffsetCommitRequestTopic28
			if err := (&item).decode(d, version); err != nil {
				return err
			}
			t.Topics[i] = item
		}
	}
	return err
}

type TxnOffsetCommitRequestTopic28 struct {
	Name       string                              // The topic name. Versions: 0+
	Partitions []TxnOffsetCommitRequestPartition28 // The partitions inside the topic that we want to committ offsets for. Versions: 0+
}

// size of TxnOffsetCommitRequestTopic28; Versions: 0-2
func (t TxnOffsetCommitRequestTopic28) size(version int16) int32 {
	var sz int32
	sz += sizeof.String(t.Name) // Name
	sz += sizeof.ArrayLength    // Partitions
	for i := len(t.Partitions) - 1; i >= 0; i-- {
		sz += t.Partitions[i].size(version)
	}
	return sz
}

// encode TxnOffsetCommitRequestTopic28; Versions: 0-2
func (t TxnOffsetCommitRequestTopic28) encode(e *protocol.Encoder, version int16) {
	e.PutString(t.Name) // Name
	// Partitions
	len1 := len(t.Partitions)
	e.PutArrayLength(len1)
	for i := 0; i < len1; i++ {
		t.Partitions[i].encode(e, version)
	}
}

// decode TxnOffsetCommitRequestTopic28; Versions: 0-2
func (t *TxnOffsetCommitRequestTopic28) decode(d *protocol.Decoder, version int16) error {
	var err error
	t.Name, err = d.String()
	if err != nil {
		return err
	}
	// Partitions
	if n, err := d.ArrayLength(); err != nil {
		return err
	} else if n >= 0 {
		t.Partitions = make([]TxnOffsetCommitRequestPartition28, n)
		for i := 0; i < n; i++ {
			var item TxnOffsetCommitRequestPartition28
			if err := (&item).decode(d, version); err != nil {
				return err
			}
			t.Partitions[i] = item
		}
	}
	return err
}

type TxnOffsetCommitRequestPartition28 struct {
	PartitionIndex       int32  // The index of the partition within the topic. Versions: 0+
	CommittedOffset      int64  // The message offset to be committed. Versions: 0+
	CommittedLeaderEpoch int32  // The leader epoch of the last consumed record. Versions: 2+
	CommittedMetadata    string // Any associated metadata the client wants to keep. Versions: 0+
}

// size of TxnOffsetCommitRequestPartition28; Versions: 0-2
func (t TxnOffsetCommitRequestPartition28) size(version int16) int32 {
	var sz int32
	sz += sizeof.Int32 // PartitionIndex
	sz += sizeof.Int64 // CommittedOffset
	if version >= 2 {
		sz += sizeof.Int32 // CommittedLeaderEpoch
	}
	sz += sizeof.String(t.CommittedMetadata) // CommittedMetadata
	return sz
}

// encode TxnOffsetCommitRequestPartition28; Versions: 0-2
func (t TxnOffsetCommitRequestPartition28) encode(e *protocol.Encoder, version int16) {
	e.PutInt32(t.PartitionIndex)  // PartitionIndex
	e.PutInt64(t.CommittedOffset) // CommittedOffset
	if version >= 2 {
		e.PutInt32(t.CommittedLeaderEpoch) // CommittedLeaderEpoch
	}
	e.PutString(t.CommittedMetadata) // CommittedMetadata
}

// decode TxnOffsetCommitRequestPartition28; Versions: 0-2
func (t *TxnOffsetCommitRequestPartition28) decode(d *protocol.Decoder, version int16) error {
	var err error
	t.PartitionIndex, err = d.Int32()
	if err != nil {
		return err
	}
	t.CommittedOffset, err = d.Int64()
	if err != nil {
		return err
	}
	if version >= 2 {
		t.CommittedLeaderEpoch, err = d.Int32()
		if err != nil {
			return err
		}
	}
	t.CommittedMetadata, err = d.String()
	if err != nil {
		return err
	}
	return err
}
