// Code generated by kafka-protocol-gen. DO NOT EDIT.
//
// Copyright 2019 Matt Ho
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package kafka

import (
	"github.com/savaki/kafka/protocol"
	"github.com/savaki/kafka/sizeof"
)

// DeleteTopicsResponse; ApiKey: 20, Versions: 0-4
type DeleteTopicsResponse struct {
	ThrottleTimeMs int32                    // The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota. Versions: 1+
	Responses      []DeletableTopicResult20 // The results for each topic we tried to delete. Versions: 0+
}

// size of DeleteTopicsResponse; Versions: 0-4
func (t DeleteTopicsResponse) size(version int16) int32 {
	var sz int32
	if version >= 1 {
		sz += sizeof.Int32 // ThrottleTimeMs
	}
	sz += sizeof.ArrayLength // Responses
	for i := len(t.Responses) - 1; i >= 0; i-- {
		sz += t.Responses[i].size(version)
	}
	return sz
}

// encode DeleteTopicsResponse; Versions: 0-4
func (t DeleteTopicsResponse) encode(e *protocol.Encoder, version int16) {
	if version >= 1 {
		e.PutInt32(t.ThrottleTimeMs) // ThrottleTimeMs
	}
	// Responses
	len1 := len(t.Responses)
	e.PutArrayLength(len1)
	for i := 0; i < len1; i++ {
		t.Responses[i].encode(e, version)
	}
}

// decode DeleteTopicsResponse; Versions: 0-4
func (t *DeleteTopicsResponse) decode(d *protocol.Decoder, version int16) error {
	var err error
	if version >= 1 {
		t.ThrottleTimeMs, err = d.Int32()
		if err != nil {
			return err
		}
	}
	// Responses
	if n, err := d.ArrayLength(); err != nil {
		return err
	} else if n >= 0 {
		t.Responses = make([]DeletableTopicResult20, n)
		for i := 0; i < n; i++ {
			var item DeletableTopicResult20
			if err := (&item).decode(d, version); err != nil {
				return err
			}
			t.Responses[i] = item
		}
	}
	return err
}

type DeletableTopicResult20 struct {
	Name      string // The topic name Versions: 0+
	ErrorCode int16  // The deletion error, or 0 if the deletion succeeded. Versions: 0+
}

// size of DeletableTopicResult20; Versions: 0-4
func (t DeletableTopicResult20) size(version int16) int32 {
	var sz int32
	sz += sizeof.String(t.Name) // Name
	sz += sizeof.Int16          // ErrorCode
	return sz
}

// encode DeletableTopicResult20; Versions: 0-4
func (t DeletableTopicResult20) encode(e *protocol.Encoder, version int16) {
	e.PutString(t.Name)     // Name
	e.PutInt16(t.ErrorCode) // ErrorCode
}

// decode DeletableTopicResult20; Versions: 0-4
func (t *DeletableTopicResult20) decode(d *protocol.Decoder, version int16) error {
	var err error
	t.Name, err = d.String()
	if err != nil {
		return err
	}
	t.ErrorCode, err = d.Int16()
	if err != nil {
		return err
	}
	return err
}
