// Code generated by kafka-protocol-gen. DO NOT EDIT.
//
// Copyright 2019 Matt Ho
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package kafka

import (
	"github.com/savaki/kafka/protocol"
	"github.com/savaki/kafka/sizeof"
)

// ProduceResponse; ApiKey: 0, Versions: 0-8
type ProduceResponse struct {
	Responses      []TopicProduceResponse0 // Each produce response Versions: 0+
	ThrottleTimeMs int32                   // The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota. Versions: 1+
}

// size of ProduceResponse; Versions: 0-8
func (t ProduceResponse) Size(version int16) int32 {
	var sz int32
	sz += sizeof.ArrayLength // Responses
	for i := len(t.Responses) - 1; i >= 0; i-- {
		sz += t.Responses[i].Size(version)
	}
	if version >= 1 {
		sz += sizeof.Int32 // ThrottleTimeMs
	}
	return sz
}

// encode ProduceResponse; Versions: 0-8
func (t ProduceResponse) Encode(e *protocol.Encoder, version int16) {
	// Responses
	len0 := len(t.Responses)
	e.PutArrayLength(len0)
	for i := 0; i < len0; i++ {
		t.Responses[i].Encode(e, version)
	}
	if version >= 1 {
		e.PutInt32(t.ThrottleTimeMs) // ThrottleTimeMs
	}
}

// decode ProduceResponse; Versions: 0-8
func (t *ProduceResponse) Decode(d *protocol.Decoder, version int16) error {
	var err error
	// Responses
	if n, err := d.ArrayLength(); err != nil {
		return err
	} else if n >= 0 {
		t.Responses = make([]TopicProduceResponse0, n)
		for i := 0; i < n; i++ {
			var item TopicProduceResponse0
			if err := (&item).Decode(d, version); err != nil {
				return err
			}
			t.Responses[i] = item
		}
	}
	if version >= 1 {
		t.ThrottleTimeMs, err = d.Int32()
		if err != nil {
			return err
		}
	}
	return err
}

type TopicProduceResponse0 struct {
	Name       string                      // The topic name Versions: 0+
	Partitions []PartitionProduceResponse0 // Each partition that we produced to within the topic. Versions: 0+
}

// size of TopicProduceResponse0; Versions: 0-8
func (t TopicProduceResponse0) Size(version int16) int32 {
	var sz int32
	sz += sizeof.String(t.Name) // Name
	sz += sizeof.ArrayLength    // Partitions
	for i := len(t.Partitions) - 1; i >= 0; i-- {
		sz += t.Partitions[i].Size(version)
	}
	return sz
}

// encode TopicProduceResponse0; Versions: 0-8
func (t TopicProduceResponse0) Encode(e *protocol.Encoder, version int16) {
	e.PutString(t.Name) // Name
	// Partitions
	len1 := len(t.Partitions)
	e.PutArrayLength(len1)
	for i := 0; i < len1; i++ {
		t.Partitions[i].Encode(e, version)
	}
}

// decode TopicProduceResponse0; Versions: 0-8
func (t *TopicProduceResponse0) Decode(d *protocol.Decoder, version int16) error {
	var err error
	t.Name, err = d.String()
	if err != nil {
		return err
	}
	// Partitions
	if n, err := d.ArrayLength(); err != nil {
		return err
	} else if n >= 0 {
		t.Partitions = make([]PartitionProduceResponse0, n)
		for i := 0; i < n; i++ {
			var item PartitionProduceResponse0
			if err := (&item).Decode(d, version); err != nil {
				return err
			}
			t.Partitions[i] = item
		}
	}
	return err
}

type PartitionProduceResponse0 struct {
	PartitionIndex  int32                        // The partition index. Versions: 0+
	ErrorCode       int16                        // The error code, or 0 if there was no error. Versions: 0+
	BaseOffset      int64                        // The base offset. Versions: 0+
	LogAppendTimeMs int64                        // The timestamp returned by broker after appending the messages. If CreateTime is used for the topic, the timestamp will be -1.  If LogAppendTime is used for the topic, the timestamp will be the broker local time when the messages are appended. Versions: 2+
	LogStartOffset  int64                        // The log start offset. Versions: 5+
	RecordErrors    []BatchIndexAndErrorMessage0 // The batch indices of records that caused the batch to be dropped Versions: 8+
	ErrorMessage    string                       // The global error message summarizing the common root cause of the records that caused the batch to be dropped Versions: 8+
}

// size of PartitionProduceResponse0; Versions: 0-8
func (t PartitionProduceResponse0) Size(version int16) int32 {
	var sz int32
	sz += sizeof.Int32 // PartitionIndex
	sz += sizeof.Int16 // ErrorCode
	sz += sizeof.Int64 // BaseOffset
	if version >= 2 {
		sz += sizeof.Int64 // LogAppendTimeMs
	}
	if version >= 5 {
		sz += sizeof.Int64 // LogStartOffset
	}
	if version >= 8 {
		sz += sizeof.ArrayLength // RecordErrors
		for i := len(t.RecordErrors) - 1; i >= 0; i-- {
			sz += t.RecordErrors[i].Size(version)
		}
	}
	if version >= 8 {
		sz += sizeof.String(t.ErrorMessage) // ErrorMessage
	}
	return sz
}

// encode PartitionProduceResponse0; Versions: 0-8
func (t PartitionProduceResponse0) Encode(e *protocol.Encoder, version int16) {
	e.PutInt32(t.PartitionIndex) // PartitionIndex
	e.PutInt16(t.ErrorCode)      // ErrorCode
	e.PutInt64(t.BaseOffset)     // BaseOffset
	if version >= 2 {
		e.PutInt64(t.LogAppendTimeMs) // LogAppendTimeMs
	}
	if version >= 5 {
		e.PutInt64(t.LogStartOffset) // LogStartOffset
	}
	if version >= 8 {
		// RecordErrors
		len5 := len(t.RecordErrors)
		e.PutArrayLength(len5)
		for i := 0; i < len5; i++ {
			t.RecordErrors[i].Encode(e, version)
		}
	}
	if version >= 8 {
		e.PutString(t.ErrorMessage) // ErrorMessage
	}
}

// decode PartitionProduceResponse0; Versions: 0-8
func (t *PartitionProduceResponse0) Decode(d *protocol.Decoder, version int16) error {
	var err error
	t.PartitionIndex, err = d.Int32()
	if err != nil {
		return err
	}
	t.ErrorCode, err = d.Int16()
	if err != nil {
		return err
	}
	t.BaseOffset, err = d.Int64()
	if err != nil {
		return err
	}
	if version >= 2 {
		t.LogAppendTimeMs, err = d.Int64()
		if err != nil {
			return err
		}
	}
	if version >= 5 {
		t.LogStartOffset, err = d.Int64()
		if err != nil {
			return err
		}
	}
	if version >= 8 {
		// RecordErrors
		if n, err := d.ArrayLength(); err != nil {
			return err
		} else if n >= 0 {
			t.RecordErrors = make([]BatchIndexAndErrorMessage0, n)
			for i := 0; i < n; i++ {
				var item BatchIndexAndErrorMessage0
				if err := (&item).Decode(d, version); err != nil {
					return err
				}
				t.RecordErrors[i] = item
			}
		}
	}
	if version >= 8 {
		t.ErrorMessage, err = d.String()
		if err != nil {
			return err
		}
	}
	return err
}

type BatchIndexAndErrorMessage0 struct {
	BatchIndex             int32  // The batch index of the record that cause the batch to be dropped Versions: 8+
	BatchIndexErrorMessage string // The error message of the record that caused the batch to be dropped Versions: 8+
}

// size of BatchIndexAndErrorMessage0; Versions: 0-8
func (t BatchIndexAndErrorMessage0) Size(version int16) int32 {
	var sz int32
	if version >= 8 {
		sz += sizeof.Int32 // BatchIndex
	}
	if version >= 8 {
		sz += sizeof.String(t.BatchIndexErrorMessage) // BatchIndexErrorMessage
	}
	return sz
}

// encode BatchIndexAndErrorMessage0; Versions: 0-8
func (t BatchIndexAndErrorMessage0) Encode(e *protocol.Encoder, version int16) {
	if version >= 8 {
		e.PutInt32(t.BatchIndex) // BatchIndex
	}
	if version >= 8 {
		e.PutString(t.BatchIndexErrorMessage) // BatchIndexErrorMessage
	}
}

// decode BatchIndexAndErrorMessage0; Versions: 0-8
func (t *BatchIndexAndErrorMessage0) Decode(d *protocol.Decoder, version int16) error {
	var err error
	if version >= 8 {
		t.BatchIndex, err = d.Int32()
		if err != nil {
			return err
		}
	}
	if version >= 8 {
		t.BatchIndexErrorMessage, err = d.String()
		if err != nil {
			return err
		}
	}
	return err
}
