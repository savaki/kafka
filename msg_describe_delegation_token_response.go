// Code generated by kafka-protocol-gen. DO NOT EDIT.
//
// Copyright 2019 Matt Ho
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package kafka

import (
	"github.com/savaki/kafka/protocol"
	"github.com/savaki/kafka/sizeof"
)

// DescribeDelegationTokenResponse; ApiKey: 41, Versions: 0-1
type DescribeDelegationTokenResponse struct {
	ErrorCode      int16                        // The error code, or 0 if there was no error. Versions: 0+
	Tokens         []DescribedDelegationToken41 // The tokens. Versions: 0+
	ThrottleTimeMs int32                        // The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota. Versions: 0+
}

// size of DescribeDelegationTokenResponse; Versions: 0-1
func (t DescribeDelegationTokenResponse) size(version int16) int32 {
	var sz int32
	sz += sizeof.Int16       // ErrorCode
	sz += sizeof.ArrayLength // Tokens
	for i := len(t.Tokens) - 1; i >= 0; i-- {
		sz += t.Tokens[i].size(version)
	}
	sz += sizeof.Int32 // ThrottleTimeMs
	return sz
}

// encode DescribeDelegationTokenResponse; Versions: 0-1
func (t DescribeDelegationTokenResponse) Encode(e *protocol.Encoder, version int16) {
	e.PutInt16(t.ErrorCode) // ErrorCode
	// Tokens
	len1 := len(t.Tokens)
	e.PutArrayLength(len1)
	for i := 0; i < len1; i++ {
		t.Tokens[i].Encode(e, version)
	}
	e.PutInt32(t.ThrottleTimeMs) // ThrottleTimeMs
}

// decode DescribeDelegationTokenResponse; Versions: 0-1
func (t *DescribeDelegationTokenResponse) Decode(d *protocol.Decoder, version int16) error {
	var err error
	t.ErrorCode, err = d.Int16()
	if err != nil {
		return err
	}
	// Tokens
	if n, err := d.ArrayLength(); err != nil {
		return err
	} else if n >= 0 {
		t.Tokens = make([]DescribedDelegationToken41, n)
		for i := 0; i < n; i++ {
			var item DescribedDelegationToken41
			if err := (&item).Decode(d, version); err != nil {
				return err
			}
			t.Tokens[i] = item
		}
	}
	t.ThrottleTimeMs, err = d.Int32()
	if err != nil {
		return err
	}
	return err
}

type DescribedDelegationToken41 struct {
	PrincipalType   string                              // The token principal type. Versions: 0+
	PrincipalName   string                              // The token principal name. Versions: 0+
	IssueTimestamp  int64                               // The token issue timestamp in milliseconds. Versions: 0+
	ExpiryTimestamp int64                               // The token expiry timestamp in milliseconds. Versions: 0+
	MaxTimestamp    int64                               // The token maximum timestamp length in milliseconds. Versions: 0+
	TokenId         string                              // The token ID. Versions: 0+
	Hmac            []byte                              // The token HMAC. Versions: 0+
	Renewers        []DescribedDelegationTokenRenewer41 // Those who are able to renew this token before it expires. Versions: 0+
}

// size of DescribedDelegationToken41; Versions: 0-1
func (t DescribedDelegationToken41) size(version int16) int32 {
	var sz int32
	sz += sizeof.String(t.PrincipalType) // PrincipalType
	sz += sizeof.String(t.PrincipalName) // PrincipalName
	sz += sizeof.Int64                   // IssueTimestamp
	sz += sizeof.Int64                   // ExpiryTimestamp
	sz += sizeof.Int64                   // MaxTimestamp
	sz += sizeof.String(t.TokenId)       // TokenId
	sz += sizeof.Bytes(t.Hmac)           // Hmac
	sz += sizeof.ArrayLength             // Renewers
	for i := len(t.Renewers) - 1; i >= 0; i-- {
		sz += t.Renewers[i].size(version)
	}
	return sz
}

// encode DescribedDelegationToken41; Versions: 0-1
func (t DescribedDelegationToken41) Encode(e *protocol.Encoder, version int16) {
	e.PutString(t.PrincipalType)  // PrincipalType
	e.PutString(t.PrincipalName)  // PrincipalName
	e.PutInt64(t.IssueTimestamp)  // IssueTimestamp
	e.PutInt64(t.ExpiryTimestamp) // ExpiryTimestamp
	e.PutInt64(t.MaxTimestamp)    // MaxTimestamp
	e.PutString(t.TokenId)        // TokenId
	e.PutBytes(t.Hmac)            // Hmac
	// Renewers
	len7 := len(t.Renewers)
	e.PutArrayLength(len7)
	for i := 0; i < len7; i++ {
		t.Renewers[i].Encode(e, version)
	}
}

// decode DescribedDelegationToken41; Versions: 0-1
func (t *DescribedDelegationToken41) Decode(d *protocol.Decoder, version int16) error {
	var err error
	t.PrincipalType, err = d.String()
	if err != nil {
		return err
	}
	t.PrincipalName, err = d.String()
	if err != nil {
		return err
	}
	t.IssueTimestamp, err = d.Int64()
	if err != nil {
		return err
	}
	t.ExpiryTimestamp, err = d.Int64()
	if err != nil {
		return err
	}
	t.MaxTimestamp, err = d.Int64()
	if err != nil {
		return err
	}
	t.TokenId, err = d.String()
	if err != nil {
		return err
	}
	t.Hmac, err = d.Bytes()
	if err != nil {
		return err
	}
	// Renewers
	if n, err := d.ArrayLength(); err != nil {
		return err
	} else if n >= 0 {
		t.Renewers = make([]DescribedDelegationTokenRenewer41, n)
		for i := 0; i < n; i++ {
			var item DescribedDelegationTokenRenewer41
			if err := (&item).Decode(d, version); err != nil {
				return err
			}
			t.Renewers[i] = item
		}
	}
	return err
}

type DescribedDelegationTokenRenewer41 struct {
	PrincipalType string // The renewer principal type Versions: 0+
	PrincipalName string // The renewer principal name Versions: 0+
}

// size of DescribedDelegationTokenRenewer41; Versions: 0-1
func (t DescribedDelegationTokenRenewer41) size(version int16) int32 {
	var sz int32
	sz += sizeof.String(t.PrincipalType) // PrincipalType
	sz += sizeof.String(t.PrincipalName) // PrincipalName
	return sz
}

// encode DescribedDelegationTokenRenewer41; Versions: 0-1
func (t DescribedDelegationTokenRenewer41) Encode(e *protocol.Encoder, version int16) {
	e.PutString(t.PrincipalType) // PrincipalType
	e.PutString(t.PrincipalName) // PrincipalName
}

// decode DescribedDelegationTokenRenewer41; Versions: 0-1
func (t *DescribedDelegationTokenRenewer41) Decode(d *protocol.Decoder, version int16) error {
	var err error
	t.PrincipalType, err = d.String()
	if err != nil {
		return err
	}
	t.PrincipalName, err = d.String()
	if err != nil {
		return err
	}
	return err
}
