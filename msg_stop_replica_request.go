// Code generated by kafka-protocol-gen. DO NOT EDIT.
//
// Copyright 2019 Matt Ho
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package kafka

import (
	"github.com/savaki/kafka/protocol"
	"github.com/savaki/kafka/sizeof"
)

// StopReplicaRequest; ApiKey: 5, Versions: 0-2
type StopReplicaRequest struct {
	ControllerId        int32                     // The controller id. Versions: 0+
	ControllerEpoch     int32                     // The controller epoch. Versions: 0+
	BrokerEpoch         int64                     // The broker epoch. Versions: 1+
	DeletePartitions    bool                      // Whether these partitions should be deleted. Versions: 0+
	UngroupedPartitions []StopReplicaPartitionV05 // The partitions to stop. Versions: 0-0
	Topics              []StopReplicaTopic5       // The topics to stop. Versions: 1+
}

// size of StopReplicaRequest; Versions: 0-2
func (t StopReplicaRequest) Size(version int16) int32 {
	var sz int32
	sz += sizeof.Int32 // ControllerId
	sz += sizeof.Int32 // ControllerEpoch
	if version >= 1 {
		sz += sizeof.Int64 // BrokerEpoch
	}
	sz += sizeof.Bool // DeletePartitions
	if version >= 0 && version <= 0 {
		sz += sizeof.ArrayLength // UngroupedPartitions
		for i := len(t.UngroupedPartitions) - 1; i >= 0; i-- {
			sz += t.UngroupedPartitions[i].Size(version)
		}
	}
	if version >= 1 {
		sz += sizeof.ArrayLength // Topics
		for i := len(t.Topics) - 1; i >= 0; i-- {
			sz += t.Topics[i].Size(version)
		}
	}
	return sz
}

// encode StopReplicaRequest; Versions: 0-2
func (t StopReplicaRequest) Encode(e *protocol.Encoder, version int16) {
	e.PutInt32(t.ControllerId)    // ControllerId
	e.PutInt32(t.ControllerEpoch) // ControllerEpoch
	if version >= 1 {
		e.PutInt64(t.BrokerEpoch) // BrokerEpoch
	}
	e.PutBool(t.DeletePartitions) // DeletePartitions
	if version >= 0 && version <= 0 {
		// UngroupedPartitions
		len4 := len(t.UngroupedPartitions)
		e.PutArrayLength(len4)
		for i := 0; i < len4; i++ {
			t.UngroupedPartitions[i].Encode(e, version)
		}
	}
	if version >= 1 {
		// Topics
		len5 := len(t.Topics)
		e.PutArrayLength(len5)
		for i := 0; i < len5; i++ {
			t.Topics[i].Encode(e, version)
		}
	}
}

// decode StopReplicaRequest; Versions: 0-2
func (t *StopReplicaRequest) Decode(d *protocol.Decoder, version int16) error {
	var err error
	t.ControllerId, err = d.Int32()
	if err != nil {
		return err
	}
	t.ControllerEpoch, err = d.Int32()
	if err != nil {
		return err
	}
	if version >= 1 {
		t.BrokerEpoch, err = d.Int64()
		if err != nil {
			return err
		}
	}
	t.DeletePartitions, err = d.Bool()
	if err != nil {
		return err
	}
	if version >= 0 && version <= 0 {
		// UngroupedPartitions
		if n, err := d.ArrayLength(); err != nil {
			return err
		} else if n >= 0 {
			t.UngroupedPartitions = make([]StopReplicaPartitionV05, n)
			for i := 0; i < n; i++ {
				var item StopReplicaPartitionV05
				if err := (&item).Decode(d, version); err != nil {
					return err
				}
				t.UngroupedPartitions[i] = item
			}
		}
	}
	if version >= 1 {
		// Topics
		if n, err := d.ArrayLength(); err != nil {
			return err
		} else if n >= 0 {
			t.Topics = make([]StopReplicaTopic5, n)
			for i := 0; i < n; i++ {
				var item StopReplicaTopic5
				if err := (&item).Decode(d, version); err != nil {
					return err
				}
				t.Topics[i] = item
			}
		}
	}
	return err
}

type StopReplicaPartitionV05 struct {
	TopicName      string // The topic name. Versions: 0-0
	PartitionIndex int32  // The partition index. Versions: 0-0
}

// size of StopReplicaPartitionV05; Versions: 0-2
func (t StopReplicaPartitionV05) Size(version int16) int32 {
	var sz int32
	if version >= 0 && version <= 0 {
		sz += sizeof.String(t.TopicName) // TopicName
	}
	if version >= 0 && version <= 0 {
		sz += sizeof.Int32 // PartitionIndex
	}
	return sz
}

// encode StopReplicaPartitionV05; Versions: 0-2
func (t StopReplicaPartitionV05) Encode(e *protocol.Encoder, version int16) {
	if version >= 0 && version <= 0 {
		e.PutString(t.TopicName) // TopicName
	}
	if version >= 0 && version <= 0 {
		e.PutInt32(t.PartitionIndex) // PartitionIndex
	}
}

// decode StopReplicaPartitionV05; Versions: 0-2
func (t *StopReplicaPartitionV05) Decode(d *protocol.Decoder, version int16) error {
	var err error
	if version >= 0 && version <= 0 {
		t.TopicName, err = d.String()
		if err != nil {
			return err
		}
	}
	if version >= 0 && version <= 0 {
		t.PartitionIndex, err = d.Int32()
		if err != nil {
			return err
		}
	}
	return err
}

type StopReplicaTopic5 struct {
	Name             string  // The topic name. Versions: 1+
	PartitionIndexes []int32 // The partition indexes. Versions: 1+
}

// size of StopReplicaTopic5; Versions: 0-2
func (t StopReplicaTopic5) Size(version int16) int32 {
	var sz int32
	if version >= 1 {
		sz += sizeof.String(t.Name) // Name
	}
	if version >= 1 {
		sz += sizeof.Int32Array(t.PartitionIndexes) // PartitionIndexes
	}
	return sz
}

// encode StopReplicaTopic5; Versions: 0-2
func (t StopReplicaTopic5) Encode(e *protocol.Encoder, version int16) {
	if version >= 1 {
		e.PutString(t.Name) // Name
	}
	if version >= 1 {
		e.PutInt32Array(t.PartitionIndexes) // PartitionIndexes
	}
}

// decode StopReplicaTopic5; Versions: 0-2
func (t *StopReplicaTopic5) Decode(d *protocol.Decoder, version int16) error {
	var err error
	if version >= 1 {
		t.Name, err = d.String()
		if err != nil {
			return err
		}
	}
	if version >= 1 {
		t.PartitionIndexes, err = d.Int32Array()
		if err != nil {
			return err
		}
	}
	return err
}
