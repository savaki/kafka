// Code generated by kafka-protocol-gen. DO NOT EDIT.
//
// Copyright 2019 Matt Ho
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package kafka

import (
	"fmt"

	"github.com/savaki/kafka/message"
)

// Client provides access to Kafka
type Broker struct {
	apiVersion apiVersion
	config     config
	conn       *Conn
}

// NewBroker a new Kafka Broker
func NewBroker(addr string, opts ...Option) (*Broker, error) {
	config := buildConfig(opts)
	conn, err := Connect(addr, opts...)
	if err != nil {
		return nil, err
	}

	broker := &Broker{
		config: config,
		conn:   conn,
	}

	// negotiate usable api versions prior to returning broker
	//
	resp, err := broker.ApiVersions(message.ApiVersionsRequest{})
	if err != nil {
		return nil, fmt.Errorf("unable to create broker: %w", err)
	}
	apiVersion, err := negotiateApiVersions(resp.ApiKeys)
	if err != nil {
		return nil, fmt.Errorf("unable to create broker: %w", err)
	}
	broker.apiVersion = apiVersion

	return broker, nil
}

// Close the connection to the broker
func (b *Broker) Close() error {
	return b.conn.Close()
}

// Produce (apiKey: 0)
func (b *Broker) Produce(req message.ProduceRequest) (message.ProduceResponse, error) {
	var resp message.ProduceResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeyProduce,
				RequestApiVersion: b.apiVersion.Produce,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.Produce)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.Produce)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.Produce)
		},
	)
	return resp, err
}

// Fetch (apiKey: 1)
func (b *Broker) Fetch(req message.FetchRequest) (message.FetchResponse, error) {
	var resp message.FetchResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeyFetch,
				RequestApiVersion: b.apiVersion.Fetch,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.Fetch)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.Fetch)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.Fetch)
		},
	)
	return resp, err
}

// ListOffset (apiKey: 2)
func (b *Broker) ListOffset(req message.ListOffsetRequest) (message.ListOffsetResponse, error) {
	var resp message.ListOffsetResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeyListOffset,
				RequestApiVersion: b.apiVersion.ListOffset,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.ListOffset)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.ListOffset)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.ListOffset)
		},
	)
	return resp, err
}

// Metadata (apiKey: 3)
func (b *Broker) Metadata(req message.MetadataRequest) (message.MetadataResponse, error) {
	var resp message.MetadataResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeyMetadata,
				RequestApiVersion: b.apiVersion.Metadata,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.Metadata)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.Metadata)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.Metadata)
		},
	)
	return resp, err
}

// LeaderAndIsr (apiKey: 4)
func (b *Broker) LeaderAndIsr(req message.LeaderAndIsrRequest) (message.LeaderAndIsrResponse, error) {
	var resp message.LeaderAndIsrResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeyLeaderAndIsr,
				RequestApiVersion: b.apiVersion.LeaderAndIsr,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.LeaderAndIsr)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.LeaderAndIsr)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.LeaderAndIsr)
		},
	)
	return resp, err
}

// StopReplica (apiKey: 5)
func (b *Broker) StopReplica(req message.StopReplicaRequest) (message.StopReplicaResponse, error) {
	var resp message.StopReplicaResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeyStopReplica,
				RequestApiVersion: b.apiVersion.StopReplica,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.StopReplica)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.StopReplica)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.StopReplica)
		},
	)
	return resp, err
}

// UpdateMetadata (apiKey: 6)
func (b *Broker) UpdateMetadata(req message.UpdateMetadataRequest) (message.UpdateMetadataResponse, error) {
	var resp message.UpdateMetadataResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeyUpdateMetadata,
				RequestApiVersion: b.apiVersion.UpdateMetadata,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.UpdateMetadata)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.UpdateMetadata)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.UpdateMetadata)
		},
	)
	return resp, err
}

// ControlledShutdown (apiKey: 7)
func (b *Broker) ControlledShutdown(req message.ControlledShutdownRequest) (message.ControlledShutdownResponse, error) {
	var resp message.ControlledShutdownResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeyControlledShutdown,
				RequestApiVersion: b.apiVersion.ControlledShutdown,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.ControlledShutdown)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.ControlledShutdown)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.ControlledShutdown)
		},
	)
	return resp, err
}

// OffsetCommit (apiKey: 8)
func (b *Broker) OffsetCommit(req message.OffsetCommitRequest) (message.OffsetCommitResponse, error) {
	var resp message.OffsetCommitResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeyOffsetCommit,
				RequestApiVersion: b.apiVersion.OffsetCommit,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.OffsetCommit)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.OffsetCommit)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.OffsetCommit)
		},
	)
	return resp, err
}

// OffsetFetch (apiKey: 9)
func (b *Broker) OffsetFetch(req message.OffsetFetchRequest) (message.OffsetFetchResponse, error) {
	var resp message.OffsetFetchResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeyOffsetFetch,
				RequestApiVersion: b.apiVersion.OffsetFetch,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.OffsetFetch)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.OffsetFetch)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.OffsetFetch)
		},
	)
	return resp, err
}

// FindCoordinator (apiKey: 10)
func (b *Broker) FindCoordinator(req message.FindCoordinatorRequest) (message.FindCoordinatorResponse, error) {
	var resp message.FindCoordinatorResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeyFindCoordinator,
				RequestApiVersion: b.apiVersion.FindCoordinator,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.FindCoordinator)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.FindCoordinator)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.FindCoordinator)
		},
	)
	return resp, err
}

// JoinGroup (apiKey: 11)
func (b *Broker) JoinGroup(req message.JoinGroupRequest) (message.JoinGroupResponse, error) {
	var resp message.JoinGroupResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeyJoinGroup,
				RequestApiVersion: b.apiVersion.JoinGroup,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.JoinGroup)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.JoinGroup)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.JoinGroup)
		},
	)
	return resp, err
}

// Heartbeat (apiKey: 12)
func (b *Broker) Heartbeat(req message.HeartbeatRequest) (message.HeartbeatResponse, error) {
	var resp message.HeartbeatResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeyHeartbeat,
				RequestApiVersion: b.apiVersion.Heartbeat,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.Heartbeat)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.Heartbeat)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.Heartbeat)
		},
	)
	return resp, err
}

// LeaveGroup (apiKey: 13)
func (b *Broker) LeaveGroup(req message.LeaveGroupRequest) (message.LeaveGroupResponse, error) {
	var resp message.LeaveGroupResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeyLeaveGroup,
				RequestApiVersion: b.apiVersion.LeaveGroup,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.LeaveGroup)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.LeaveGroup)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.LeaveGroup)
		},
	)
	return resp, err
}

// SyncGroup (apiKey: 14)
func (b *Broker) SyncGroup(req message.SyncGroupRequest) (message.SyncGroupResponse, error) {
	var resp message.SyncGroupResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeySyncGroup,
				RequestApiVersion: b.apiVersion.SyncGroup,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.SyncGroup)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.SyncGroup)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.SyncGroup)
		},
	)
	return resp, err
}

// DescribeGroups (apiKey: 15)
func (b *Broker) DescribeGroups(req message.DescribeGroupsRequest) (message.DescribeGroupsResponse, error) {
	var resp message.DescribeGroupsResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeyDescribeGroups,
				RequestApiVersion: b.apiVersion.DescribeGroups,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.DescribeGroups)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.DescribeGroups)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.DescribeGroups)
		},
	)
	return resp, err
}

// ListGroups (apiKey: 16)
func (b *Broker) ListGroups(req message.ListGroupsRequest) (message.ListGroupsResponse, error) {
	var resp message.ListGroupsResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeyListGroups,
				RequestApiVersion: b.apiVersion.ListGroups,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.ListGroups)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.ListGroups)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.ListGroups)
		},
	)
	return resp, err
}

// SaslHandshake (apiKey: 17)
func (b *Broker) SaslHandshake(req message.SaslHandshakeRequest) (message.SaslHandshakeResponse, error) {
	var resp message.SaslHandshakeResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeySaslHandshake,
				RequestApiVersion: b.apiVersion.SaslHandshake,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.SaslHandshake)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.SaslHandshake)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.SaslHandshake)
		},
	)
	return resp, err
}

// ApiVersions (apiKey: 18)
func (b *Broker) ApiVersions(req message.ApiVersionsRequest) (message.ApiVersionsResponse, error) {
	var resp message.ApiVersionsResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeyApiVersions,
				RequestApiVersion: b.apiVersion.ApiVersions,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.ApiVersions)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.ApiVersions)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.ApiVersions)
		},
	)
	return resp, err
}

// CreateTopics (apiKey: 19)
func (b *Broker) CreateTopics(req message.CreateTopicsRequest) (message.CreateTopicsResponse, error) {
	var resp message.CreateTopicsResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeyCreateTopics,
				RequestApiVersion: b.apiVersion.CreateTopics,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.CreateTopics)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.CreateTopics)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.CreateTopics)
		},
	)
	return resp, err
}

// DeleteTopics (apiKey: 20)
func (b *Broker) DeleteTopics(req message.DeleteTopicsRequest) (message.DeleteTopicsResponse, error) {
	var resp message.DeleteTopicsResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeyDeleteTopics,
				RequestApiVersion: b.apiVersion.DeleteTopics,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.DeleteTopics)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.DeleteTopics)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.DeleteTopics)
		},
	)
	return resp, err
}

// DeleteRecords (apiKey: 21)
func (b *Broker) DeleteRecords(req message.DeleteRecordsRequest) (message.DeleteRecordsResponse, error) {
	var resp message.DeleteRecordsResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeyDeleteRecords,
				RequestApiVersion: b.apiVersion.DeleteRecords,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.DeleteRecords)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.DeleteRecords)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.DeleteRecords)
		},
	)
	return resp, err
}

// InitProducerId (apiKey: 22)
func (b *Broker) InitProducerId(req message.InitProducerIdRequest) (message.InitProducerIdResponse, error) {
	var resp message.InitProducerIdResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeyInitProducerId,
				RequestApiVersion: b.apiVersion.InitProducerId,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.InitProducerId)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.InitProducerId)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.InitProducerId)
		},
	)
	return resp, err
}

// OffsetForLeaderEpoch (apiKey: 23)
func (b *Broker) OffsetForLeaderEpoch(req message.OffsetForLeaderEpochRequest) (message.OffsetForLeaderEpochResponse, error) {
	var resp message.OffsetForLeaderEpochResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeyOffsetForLeaderEpoch,
				RequestApiVersion: b.apiVersion.OffsetForLeaderEpoch,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.OffsetForLeaderEpoch)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.OffsetForLeaderEpoch)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.OffsetForLeaderEpoch)
		},
	)
	return resp, err
}

// AddPartitionsToTxn (apiKey: 24)
func (b *Broker) AddPartitionsToTxn(req message.AddPartitionsToTxnRequest) (message.AddPartitionsToTxnResponse, error) {
	var resp message.AddPartitionsToTxnResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeyAddPartitionsToTxn,
				RequestApiVersion: b.apiVersion.AddPartitionsToTxn,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.AddPartitionsToTxn)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.AddPartitionsToTxn)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.AddPartitionsToTxn)
		},
	)
	return resp, err
}

// AddOffsetsToTxn (apiKey: 25)
func (b *Broker) AddOffsetsToTxn(req message.AddOffsetsToTxnRequest) (message.AddOffsetsToTxnResponse, error) {
	var resp message.AddOffsetsToTxnResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeyAddOffsetsToTxn,
				RequestApiVersion: b.apiVersion.AddOffsetsToTxn,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.AddOffsetsToTxn)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.AddOffsetsToTxn)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.AddOffsetsToTxn)
		},
	)
	return resp, err
}

// EndTxn (apiKey: 26)
func (b *Broker) EndTxn(req message.EndTxnRequest) (message.EndTxnResponse, error) {
	var resp message.EndTxnResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeyEndTxn,
				RequestApiVersion: b.apiVersion.EndTxn,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.EndTxn)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.EndTxn)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.EndTxn)
		},
	)
	return resp, err
}

// WriteTxnMarkers (apiKey: 27)
func (b *Broker) WriteTxnMarkers(req message.WriteTxnMarkersRequest) (message.WriteTxnMarkersResponse, error) {
	var resp message.WriteTxnMarkersResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeyWriteTxnMarkers,
				RequestApiVersion: b.apiVersion.WriteTxnMarkers,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.WriteTxnMarkers)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.WriteTxnMarkers)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.WriteTxnMarkers)
		},
	)
	return resp, err
}

// TxnOffsetCommit (apiKey: 28)
func (b *Broker) TxnOffsetCommit(req message.TxnOffsetCommitRequest) (message.TxnOffsetCommitResponse, error) {
	var resp message.TxnOffsetCommitResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeyTxnOffsetCommit,
				RequestApiVersion: b.apiVersion.TxnOffsetCommit,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.TxnOffsetCommit)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.TxnOffsetCommit)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.TxnOffsetCommit)
		},
	)
	return resp, err
}

// DescribeAcls (apiKey: 29)
func (b *Broker) DescribeAcls(req message.DescribeAclsRequest) (message.DescribeAclsResponse, error) {
	var resp message.DescribeAclsResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeyDescribeAcls,
				RequestApiVersion: b.apiVersion.DescribeAcls,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.DescribeAcls)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.DescribeAcls)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.DescribeAcls)
		},
	)
	return resp, err
}

// CreateAcls (apiKey: 30)
func (b *Broker) CreateAcls(req message.CreateAclsRequest) (message.CreateAclsResponse, error) {
	var resp message.CreateAclsResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeyCreateAcls,
				RequestApiVersion: b.apiVersion.CreateAcls,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.CreateAcls)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.CreateAcls)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.CreateAcls)
		},
	)
	return resp, err
}

// DeleteAcls (apiKey: 31)
func (b *Broker) DeleteAcls(req message.DeleteAclsRequest) (message.DeleteAclsResponse, error) {
	var resp message.DeleteAclsResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeyDeleteAcls,
				RequestApiVersion: b.apiVersion.DeleteAcls,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.DeleteAcls)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.DeleteAcls)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.DeleteAcls)
		},
	)
	return resp, err
}

// DescribeConfigs (apiKey: 32)
func (b *Broker) DescribeConfigs(req message.DescribeConfigsRequest) (message.DescribeConfigsResponse, error) {
	var resp message.DescribeConfigsResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeyDescribeConfigs,
				RequestApiVersion: b.apiVersion.DescribeConfigs,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.DescribeConfigs)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.DescribeConfigs)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.DescribeConfigs)
		},
	)
	return resp, err
}

// AlterConfigs (apiKey: 33)
func (b *Broker) AlterConfigs(req message.AlterConfigsRequest) (message.AlterConfigsResponse, error) {
	var resp message.AlterConfigsResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeyAlterConfigs,
				RequestApiVersion: b.apiVersion.AlterConfigs,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.AlterConfigs)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.AlterConfigs)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.AlterConfigs)
		},
	)
	return resp, err
}

// AlterReplicaLogDirs (apiKey: 34)
func (b *Broker) AlterReplicaLogDirs(req message.AlterReplicaLogDirsRequest) (message.AlterReplicaLogDirsResponse, error) {
	var resp message.AlterReplicaLogDirsResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeyAlterReplicaLogDirs,
				RequestApiVersion: b.apiVersion.AlterReplicaLogDirs,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.AlterReplicaLogDirs)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.AlterReplicaLogDirs)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.AlterReplicaLogDirs)
		},
	)
	return resp, err
}

// DescribeLogDirs (apiKey: 35)
func (b *Broker) DescribeLogDirs(req message.DescribeLogDirsRequest) (message.DescribeLogDirsResponse, error) {
	var resp message.DescribeLogDirsResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeyDescribeLogDirs,
				RequestApiVersion: b.apiVersion.DescribeLogDirs,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.DescribeLogDirs)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.DescribeLogDirs)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.DescribeLogDirs)
		},
	)
	return resp, err
}

// SaslAuthenticate (apiKey: 36)
func (b *Broker) SaslAuthenticate(req message.SaslAuthenticateRequest) (message.SaslAuthenticateResponse, error) {
	var resp message.SaslAuthenticateResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeySaslAuthenticate,
				RequestApiVersion: b.apiVersion.SaslAuthenticate,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.SaslAuthenticate)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.SaslAuthenticate)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.SaslAuthenticate)
		},
	)
	return resp, err
}

// CreatePartitions (apiKey: 37)
func (b *Broker) CreatePartitions(req message.CreatePartitionsRequest) (message.CreatePartitionsResponse, error) {
	var resp message.CreatePartitionsResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeyCreatePartitions,
				RequestApiVersion: b.apiVersion.CreatePartitions,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.CreatePartitions)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.CreatePartitions)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.CreatePartitions)
		},
	)
	return resp, err
}

// CreateDelegationToken (apiKey: 38)
func (b *Broker) CreateDelegationToken(req message.CreateDelegationTokenRequest) (message.CreateDelegationTokenResponse, error) {
	var resp message.CreateDelegationTokenResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeyCreateDelegationToken,
				RequestApiVersion: b.apiVersion.CreateDelegationToken,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.CreateDelegationToken)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.CreateDelegationToken)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.CreateDelegationToken)
		},
	)
	return resp, err
}

// RenewDelegationToken (apiKey: 39)
func (b *Broker) RenewDelegationToken(req message.RenewDelegationTokenRequest) (message.RenewDelegationTokenResponse, error) {
	var resp message.RenewDelegationTokenResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeyRenewDelegationToken,
				RequestApiVersion: b.apiVersion.RenewDelegationToken,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.RenewDelegationToken)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.RenewDelegationToken)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.RenewDelegationToken)
		},
	)
	return resp, err
}

// ExpireDelegationToken (apiKey: 40)
func (b *Broker) ExpireDelegationToken(req message.ExpireDelegationTokenRequest) (message.ExpireDelegationTokenResponse, error) {
	var resp message.ExpireDelegationTokenResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeyExpireDelegationToken,
				RequestApiVersion: b.apiVersion.ExpireDelegationToken,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.ExpireDelegationToken)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.ExpireDelegationToken)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.ExpireDelegationToken)
		},
	)
	return resp, err
}

// DescribeDelegationToken (apiKey: 41)
func (b *Broker) DescribeDelegationToken(req message.DescribeDelegationTokenRequest) (message.DescribeDelegationTokenResponse, error) {
	var resp message.DescribeDelegationTokenResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeyDescribeDelegationToken,
				RequestApiVersion: b.apiVersion.DescribeDelegationToken,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.DescribeDelegationToken)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.DescribeDelegationToken)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.DescribeDelegationToken)
		},
	)
	return resp, err
}

// DeleteGroups (apiKey: 42)
func (b *Broker) DeleteGroups(req message.DeleteGroupsRequest) (message.DeleteGroupsResponse, error) {
	var resp message.DeleteGroupsResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeyDeleteGroups,
				RequestApiVersion: b.apiVersion.DeleteGroups,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.DeleteGroups)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.DeleteGroups)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.DeleteGroups)
		},
	)
	return resp, err
}

// ElectLeaders (apiKey: 43)
func (b *Broker) ElectLeaders(req message.ElectLeadersRequest) (message.ElectLeadersResponse, error) {
	var resp message.ElectLeadersResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeyElectLeaders,
				RequestApiVersion: b.apiVersion.ElectLeaders,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.ElectLeaders)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.ElectLeaders)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.ElectLeaders)
		},
	)
	return resp, err
}

// IncrementalAlterConfigs (apiKey: 44)
func (b *Broker) IncrementalAlterConfigs(req message.IncrementalAlterConfigsRequest) (message.IncrementalAlterConfigsResponse, error) {
	var resp message.IncrementalAlterConfigsResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeyIncrementalAlterConfigs,
				RequestApiVersion: b.apiVersion.IncrementalAlterConfigs,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.IncrementalAlterConfigs)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.IncrementalAlterConfigs)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.IncrementalAlterConfigs)
		},
	)
	return resp, err
}

// AlterPartitionReassignments (apiKey: 45)
func (b *Broker) AlterPartitionReassignments(req message.AlterPartitionReassignmentsRequest) (message.AlterPartitionReassignmentsResponse, error) {
	var resp message.AlterPartitionReassignmentsResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeyAlterPartitionReassignments,
				RequestApiVersion: b.apiVersion.AlterPartitionReassignments,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.AlterPartitionReassignments)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.AlterPartitionReassignments)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.AlterPartitionReassignments)
		},
	)
	return resp, err
}

// ListPartitionReassignments (apiKey: 46)
func (b *Broker) ListPartitionReassignments(req message.ListPartitionReassignmentsRequest) (message.ListPartitionReassignmentsResponse, error) {
	var resp message.ListPartitionReassignmentsResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeyListPartitionReassignments,
				RequestApiVersion: b.apiVersion.ListPartitionReassignments,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.ListPartitionReassignments)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.ListPartitionReassignments)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.ListPartitionReassignments)
		},
	)
	return resp, err
}

// OffsetDelete (apiKey: 47)
func (b *Broker) OffsetDelete(req message.OffsetDeleteRequest) (message.OffsetDeleteResponse, error) {
	var resp message.OffsetDeleteResponse
	err := b.conn.Do(
		// encode request
		func(e *message.Encoder, correlationID int32) {
			hdr := message.RequestHeader{
				RequestApiKey:     message.KeyOffsetDelete,
				RequestApiVersion: b.apiVersion.OffsetDelete,
				CorrelationId:     correlationID,
				ClientId:          b.config.clientID,
			}
			size := hdr.Size(2) + req.Size(b.apiVersion.OffsetDelete)
			e.PutInt32(size)
			hdr.Encode(e, 2)
			req.Encode(e, b.apiVersion.OffsetDelete)
		},
		// decode response
		func(d *message.Decoder) error {
			return (&resp).Decode(d, b.apiVersion.OffsetDelete)
		},
	)
	return resp, err
}

// Message defines the standard consumer and producer message
type Message struct {
	Topic string
	Key   []byte
	Value []byte
}

type MessageHandler func(*Message) error

type Subscription struct {
}

func (b *Broker) Subscribe(topics string, handler MessageHandler) (*Subscription, error) {
	return nil, nil
}

// apiVersion contains the negotiated versions for each api key
type apiVersion struct {
	Produce                     int16
	Fetch                       int16
	ListOffset                  int16
	Metadata                    int16
	LeaderAndIsr                int16
	StopReplica                 int16
	UpdateMetadata              int16
	ControlledShutdown          int16
	OffsetCommit                int16
	OffsetFetch                 int16
	FindCoordinator             int16
	JoinGroup                   int16
	Heartbeat                   int16
	LeaveGroup                  int16
	SyncGroup                   int16
	DescribeGroups              int16
	ListGroups                  int16
	SaslHandshake               int16
	ApiVersions                 int16
	CreateTopics                int16
	DeleteTopics                int16
	DeleteRecords               int16
	InitProducerId              int16
	OffsetForLeaderEpoch        int16
	AddPartitionsToTxn          int16
	AddOffsetsToTxn             int16
	EndTxn                      int16
	WriteTxnMarkers             int16
	TxnOffsetCommit             int16
	DescribeAcls                int16
	CreateAcls                  int16
	DeleteAcls                  int16
	DescribeConfigs             int16
	AlterConfigs                int16
	AlterReplicaLogDirs         int16
	DescribeLogDirs             int16
	SaslAuthenticate            int16
	CreatePartitions            int16
	CreateDelegationToken       int16
	RenewDelegationToken        int16
	ExpireDelegationToken       int16
	DescribeDelegationToken     int16
	DeleteGroups                int16
	ElectLeaders                int16
	IncrementalAlterConfigs     int16
	AlterPartitionReassignments int16
	ListPartitionReassignments  int16
	OffsetDelete                int16
}

// negotiateApiVersions accepts the apiKeys from the broker and negotiates
// acceptable versions for each api based on the versions supported by
// this library.
func negotiateApiVersions(apiKeys []message.ApiVersionsResponseKey18) (apiVersion, error) {
	// Since this file is generated, there's no need to externalize the supported
	// versions elsewhere.  We can simply inline the values into the call to matchVersion
	var av apiVersion
	var err error
	for _, apiKey := range apiKeys {
		switch apiKey.ApiKey {
		case message.KeyProduce:
			av.Produce, err = matchVersion(apiKey, 0, 8)
			if err != nil {
				return apiVersion{}, err
			}
		case message.KeyFetch:
			av.Fetch, err = matchVersion(apiKey, 0, 11)
			if err != nil {
				return apiVersion{}, err
			}
		case message.KeyListOffset:
			av.ListOffset, err = matchVersion(apiKey, 0, 5)
			if err != nil {
				return apiVersion{}, err
			}
		case message.KeyMetadata:
			av.Metadata, err = matchVersion(apiKey, 0, 9)
			if err != nil {
				return apiVersion{}, err
			}
		case message.KeyLeaderAndIsr:
			av.LeaderAndIsr, err = matchVersion(apiKey, 0, 4)
			if err != nil {
				return apiVersion{}, err
			}
		case message.KeyStopReplica:
			av.StopReplica, err = matchVersion(apiKey, 0, 2)
			if err != nil {
				return apiVersion{}, err
			}
		case message.KeyUpdateMetadata:
			av.UpdateMetadata, err = matchVersion(apiKey, 0, 6)
			if err != nil {
				return apiVersion{}, err
			}
		case message.KeyControlledShutdown:
			av.ControlledShutdown, err = matchVersion(apiKey, 0, 3)
			if err != nil {
				return apiVersion{}, err
			}
		case message.KeyOffsetCommit:
			av.OffsetCommit, err = matchVersion(apiKey, 0, 8)
			if err != nil {
				return apiVersion{}, err
			}
		case message.KeyOffsetFetch:
			av.OffsetFetch, err = matchVersion(apiKey, 0, 6)
			if err != nil {
				return apiVersion{}, err
			}
		case message.KeyFindCoordinator:
			av.FindCoordinator, err = matchVersion(apiKey, 0, 3)
			if err != nil {
				return apiVersion{}, err
			}
		case message.KeyJoinGroup:
			av.JoinGroup, err = matchVersion(apiKey, 0, 6)
			if err != nil {
				return apiVersion{}, err
			}
		case message.KeyHeartbeat:
			av.Heartbeat, err = matchVersion(apiKey, 0, 4)
			if err != nil {
				return apiVersion{}, err
			}
		case message.KeyLeaveGroup:
			av.LeaveGroup, err = matchVersion(apiKey, 0, 4)
			if err != nil {
				return apiVersion{}, err
			}
		case message.KeySyncGroup:
			av.SyncGroup, err = matchVersion(apiKey, 0, 4)
			if err != nil {
				return apiVersion{}, err
			}
		case message.KeyDescribeGroups:
			av.DescribeGroups, err = matchVersion(apiKey, 0, 5)
			if err != nil {
				return apiVersion{}, err
			}
		case message.KeyListGroups:
			av.ListGroups, err = matchVersion(apiKey, 0, 3)
			if err != nil {
				return apiVersion{}, err
			}
		case message.KeySaslHandshake:
			av.SaslHandshake, err = matchVersion(apiKey, 0, 1)
			if err != nil {
				return apiVersion{}, err
			}
		case message.KeyApiVersions:
			av.ApiVersions, err = matchVersion(apiKey, 0, 3)
			if err != nil {
				return apiVersion{}, err
			}
		case message.KeyCreateTopics:
			av.CreateTopics, err = matchVersion(apiKey, 0, 5)
			if err != nil {
				return apiVersion{}, err
			}
		case message.KeyDeleteTopics:
			av.DeleteTopics, err = matchVersion(apiKey, 0, 4)
			if err != nil {
				return apiVersion{}, err
			}
		case message.KeyDeleteRecords:
			av.DeleteRecords, err = matchVersion(apiKey, 0, 1)
			if err != nil {
				return apiVersion{}, err
			}
		case message.KeyInitProducerId:
			av.InitProducerId, err = matchVersion(apiKey, 0, 2)
			if err != nil {
				return apiVersion{}, err
			}
		case message.KeyOffsetForLeaderEpoch:
			av.OffsetForLeaderEpoch, err = matchVersion(apiKey, 0, 3)
			if err != nil {
				return apiVersion{}, err
			}
		case message.KeyAddPartitionsToTxn:
			av.AddPartitionsToTxn, err = matchVersion(apiKey, 0, 1)
			if err != nil {
				return apiVersion{}, err
			}
		case message.KeyAddOffsetsToTxn:
			av.AddOffsetsToTxn, err = matchVersion(apiKey, 0, 1)
			if err != nil {
				return apiVersion{}, err
			}
		case message.KeyEndTxn:
			av.EndTxn, err = matchVersion(apiKey, 0, 1)
			if err != nil {
				return apiVersion{}, err
			}
		case message.KeyWriteTxnMarkers:
			av.WriteTxnMarkers, err = matchVersion(apiKey, 0, 0)
			if err != nil {
				return apiVersion{}, err
			}
		case message.KeyTxnOffsetCommit:
			av.TxnOffsetCommit, err = matchVersion(apiKey, 0, 2)
			if err != nil {
				return apiVersion{}, err
			}
		case message.KeyDescribeAcls:
			av.DescribeAcls, err = matchVersion(apiKey, 0, 1)
			if err != nil {
				return apiVersion{}, err
			}
		case message.KeyCreateAcls:
			av.CreateAcls, err = matchVersion(apiKey, 0, 1)
			if err != nil {
				return apiVersion{}, err
			}
		case message.KeyDeleteAcls:
			av.DeleteAcls, err = matchVersion(apiKey, 0, 1)
			if err != nil {
				return apiVersion{}, err
			}
		case message.KeyDescribeConfigs:
			av.DescribeConfigs, err = matchVersion(apiKey, 0, 2)
			if err != nil {
				return apiVersion{}, err
			}
		case message.KeyAlterConfigs:
			av.AlterConfigs, err = matchVersion(apiKey, 0, 1)
			if err != nil {
				return apiVersion{}, err
			}
		case message.KeyAlterReplicaLogDirs:
			av.AlterReplicaLogDirs, err = matchVersion(apiKey, 0, 1)
			if err != nil {
				return apiVersion{}, err
			}
		case message.KeyDescribeLogDirs:
			av.DescribeLogDirs, err = matchVersion(apiKey, 0, 1)
			if err != nil {
				return apiVersion{}, err
			}
		case message.KeySaslAuthenticate:
			av.SaslAuthenticate, err = matchVersion(apiKey, 0, 1)
			if err != nil {
				return apiVersion{}, err
			}
		case message.KeyCreatePartitions:
			av.CreatePartitions, err = matchVersion(apiKey, 0, 1)
			if err != nil {
				return apiVersion{}, err
			}
		case message.KeyCreateDelegationToken:
			av.CreateDelegationToken, err = matchVersion(apiKey, 0, 2)
			if err != nil {
				return apiVersion{}, err
			}
		case message.KeyRenewDelegationToken:
			av.RenewDelegationToken, err = matchVersion(apiKey, 0, 1)
			if err != nil {
				return apiVersion{}, err
			}
		case message.KeyExpireDelegationToken:
			av.ExpireDelegationToken, err = matchVersion(apiKey, 0, 1)
			if err != nil {
				return apiVersion{}, err
			}
		case message.KeyDescribeDelegationToken:
			av.DescribeDelegationToken, err = matchVersion(apiKey, 0, 1)
			if err != nil {
				return apiVersion{}, err
			}
		case message.KeyDeleteGroups:
			av.DeleteGroups, err = matchVersion(apiKey, 0, 2)
			if err != nil {
				return apiVersion{}, err
			}
		case message.KeyElectLeaders:
			av.ElectLeaders, err = matchVersion(apiKey, 0, 2)
			if err != nil {
				return apiVersion{}, err
			}
		case message.KeyIncrementalAlterConfigs:
			av.IncrementalAlterConfigs, err = matchVersion(apiKey, 0, 1)
			if err != nil {
				return apiVersion{}, err
			}
		case message.KeyAlterPartitionReassignments:
			av.AlterPartitionReassignments, err = matchVersion(apiKey, 0, 0)
			if err != nil {
				return apiVersion{}, err
			}
		case message.KeyListPartitionReassignments:
			av.ListPartitionReassignments, err = matchVersion(apiKey, 0, 0)
			if err != nil {
				return apiVersion{}, err
			}
		case message.KeyOffsetDelete:
			av.OffsetDelete, err = matchVersion(apiKey, 0, 0)
			if err != nil {
				return apiVersion{}, err
			}
		}
	}
	return av, nil
}

// matchVersion determines which version of the api to use
func matchVersion(apiKey message.ApiVersionsResponseKey18, minVersion, maxVersion int16) (int16, error) {
	for version := apiKey.MaxVersion; version >= apiKey.MinVersion; version-- {
		if version := apiKey.MaxVersion; version >= minVersion && version <= maxVersion {
			return version, nil
		}
	}
	return 0, fmt.Errorf("unable to negotiate version for api key, %v", apiKey.ApiKey)
}
