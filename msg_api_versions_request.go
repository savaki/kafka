// Code generated by kafka-protocol-gen. DO NOT EDIT.
//
// Copyright 2019 Matt Ho
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package kafka

import (
	"github.com/savaki/kafka/protocol"
	"github.com/savaki/kafka/sizeof"
)

// ApiVersionsRequest; ApiKey: 18, Versions: 0-3
type ApiVersionsRequest struct {
	ClientSoftwareName    string // The name of the client. Versions: 3+
	ClientSoftwareVersion string // The version of the client. Versions: 3+
}

// size of ApiVersionsRequest; Versions: 0-3
func (t ApiVersionsRequest) Size(version int16) int32 {
	var sz int32
	if version >= 3 {
		sz += sizeof.String(t.ClientSoftwareName) // ClientSoftwareName
	}
	if version >= 3 {
		sz += sizeof.String(t.ClientSoftwareVersion) // ClientSoftwareVersion
	}
	return sz
}

// encode ApiVersionsRequest; Versions: 0-3
func (t ApiVersionsRequest) Encode(e *protocol.Encoder, version int16) {
	if version >= 3 {
		e.PutString(t.ClientSoftwareName) // ClientSoftwareName
	}
	if version >= 3 {
		e.PutString(t.ClientSoftwareVersion) // ClientSoftwareVersion
	}
}

// decode ApiVersionsRequest; Versions: 0-3
func (t *ApiVersionsRequest) Decode(d *protocol.Decoder, version int16) error {
	var err error
	if version >= 3 {
		t.ClientSoftwareName, err = d.String()
		if err != nil {
			return err
		}
	}
	if version >= 3 {
		t.ClientSoftwareVersion, err = d.String()
		if err != nil {
			return err
		}
	}
	return err
}
