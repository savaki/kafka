// Code generated by kafka-protocol-gen. DO NOT EDIT.
//
// Copyright 2019 Matt Ho
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package kafka

import (
	"github.com/savaki/kafka/protocol"
	"github.com/savaki/kafka/sizeof"
)

// AddPartitionsToTxnResponse; ApiKey: 24, Versions: 0-1
type AddPartitionsToTxnResponse struct {
	ThrottleTimeMs int32                             // Duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota. Versions: 0+
	Results        []AddPartitionsToTxnTopicResult24 // The results for each topic. Versions: 0+
}

// size of AddPartitionsToTxnResponse; Versions: 0-1
func (t AddPartitionsToTxnResponse) size(version int16) int32 {
	var sz int32
	sz += sizeof.Int32       // ThrottleTimeMs
	sz += sizeof.ArrayLength // Results
	for i := len(t.Results) - 1; i >= 0; i-- {
		sz += t.Results[i].size(version)
	}
	return sz
}

// encode AddPartitionsToTxnResponse; Versions: 0-1
func (t AddPartitionsToTxnResponse) Encode(e *protocol.Encoder, version int16) {
	e.PutInt32(t.ThrottleTimeMs) // ThrottleTimeMs
	// Results
	len1 := len(t.Results)
	e.PutArrayLength(len1)
	for i := 0; i < len1; i++ {
		t.Results[i].Encode(e, version)
	}
}

// decode AddPartitionsToTxnResponse; Versions: 0-1
func (t *AddPartitionsToTxnResponse) Decode(d *protocol.Decoder, version int16) error {
	var err error
	t.ThrottleTimeMs, err = d.Int32()
	if err != nil {
		return err
	}
	// Results
	if n, err := d.ArrayLength(); err != nil {
		return err
	} else if n >= 0 {
		t.Results = make([]AddPartitionsToTxnTopicResult24, n)
		for i := 0; i < n; i++ {
			var item AddPartitionsToTxnTopicResult24
			if err := (&item).Decode(d, version); err != nil {
				return err
			}
			t.Results[i] = item
		}
	}
	return err
}

type AddPartitionsToTxnTopicResult24 struct {
	Name    string                                // The topic name. Versions: 0+
	Results []AddPartitionsToTxnPartitionResult24 // The results for each partition Versions: 0+
}

// size of AddPartitionsToTxnTopicResult24; Versions: 0-1
func (t AddPartitionsToTxnTopicResult24) size(version int16) int32 {
	var sz int32
	sz += sizeof.String(t.Name) // Name
	sz += sizeof.ArrayLength    // Results
	for i := len(t.Results) - 1; i >= 0; i-- {
		sz += t.Results[i].size(version)
	}
	return sz
}

// encode AddPartitionsToTxnTopicResult24; Versions: 0-1
func (t AddPartitionsToTxnTopicResult24) Encode(e *protocol.Encoder, version int16) {
	e.PutString(t.Name) // Name
	// Results
	len1 := len(t.Results)
	e.PutArrayLength(len1)
	for i := 0; i < len1; i++ {
		t.Results[i].Encode(e, version)
	}
}

// decode AddPartitionsToTxnTopicResult24; Versions: 0-1
func (t *AddPartitionsToTxnTopicResult24) Decode(d *protocol.Decoder, version int16) error {
	var err error
	t.Name, err = d.String()
	if err != nil {
		return err
	}
	// Results
	if n, err := d.ArrayLength(); err != nil {
		return err
	} else if n >= 0 {
		t.Results = make([]AddPartitionsToTxnPartitionResult24, n)
		for i := 0; i < n; i++ {
			var item AddPartitionsToTxnPartitionResult24
			if err := (&item).Decode(d, version); err != nil {
				return err
			}
			t.Results[i] = item
		}
	}
	return err
}

type AddPartitionsToTxnPartitionResult24 struct {
	PartitionIndex int32 // The partition indexes. Versions: 0+
	ErrorCode      int16 // The response error code. Versions: 0+
}

// size of AddPartitionsToTxnPartitionResult24; Versions: 0-1
func (t AddPartitionsToTxnPartitionResult24) size(version int16) int32 {
	var sz int32
	sz += sizeof.Int32 // PartitionIndex
	sz += sizeof.Int16 // ErrorCode
	return sz
}

// encode AddPartitionsToTxnPartitionResult24; Versions: 0-1
func (t AddPartitionsToTxnPartitionResult24) Encode(e *protocol.Encoder, version int16) {
	e.PutInt32(t.PartitionIndex) // PartitionIndex
	e.PutInt16(t.ErrorCode)      // ErrorCode
}

// decode AddPartitionsToTxnPartitionResult24; Versions: 0-1
func (t *AddPartitionsToTxnPartitionResult24) Decode(d *protocol.Decoder, version int16) error {
	var err error
	t.PartitionIndex, err = d.Int32()
	if err != nil {
		return err
	}
	t.ErrorCode, err = d.Int16()
	if err != nil {
		return err
	}
	return err
}
