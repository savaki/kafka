// Code generated by kafka-protocol-gen. DO NOT EDIT.
//
// Copyright 2019 Matt Ho
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package kafka

import (
	"github.com/savaki/kafka/protocol"
	"github.com/savaki/kafka/sizeof"
)

// SaslAuthenticateResponse; ApiKey: 36, Versions: 0-1
type SaslAuthenticateResponse struct {
	ErrorCode         int16  // The error code, or 0 if there was no error. Versions: 0+
	ErrorMessage      string // The error message, or null if there was no error. Versions: 0+
	AuthBytes         []byte // The SASL authentication bytes from the server, as defined by the SASL mechanism. Versions: 0+
	SessionLifetimeMs int64  // The SASL authentication bytes from the server, as defined by the SASL mechanism. Versions: 1+
}

// size of SaslAuthenticateResponse; Versions: 0-1
func (t SaslAuthenticateResponse) size(version int16) int32 {
	var sz int32
	sz += sizeof.Int16                  // ErrorCode
	sz += sizeof.String(t.ErrorMessage) // ErrorMessage
	sz += sizeof.Bytes(t.AuthBytes)     // AuthBytes
	if version >= 1 {
		sz += sizeof.Int64 // SessionLifetimeMs
	}
	return sz
}

// encode SaslAuthenticateResponse; Versions: 0-1
func (t SaslAuthenticateResponse) Encode(e *protocol.Encoder, version int16) {
	e.PutInt16(t.ErrorCode)     // ErrorCode
	e.PutString(t.ErrorMessage) // ErrorMessage
	e.PutBytes(t.AuthBytes)     // AuthBytes
	if version >= 1 {
		e.PutInt64(t.SessionLifetimeMs) // SessionLifetimeMs
	}
}

// decode SaslAuthenticateResponse; Versions: 0-1
func (t *SaslAuthenticateResponse) Decode(d *protocol.Decoder, version int16) error {
	var err error
	t.ErrorCode, err = d.Int16()
	if err != nil {
		return err
	}
	t.ErrorMessage, err = d.String()
	if err != nil {
		return err
	}
	t.AuthBytes, err = d.Bytes()
	if err != nil {
		return err
	}
	if version >= 1 {
		t.SessionLifetimeMs, err = d.Int64()
		if err != nil {
			return err
		}
	}
	return err
}
