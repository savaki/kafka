// Code generated by kafka-protocol-gen. DO NOT EDIT.
//
// Copyright 2019 Matt Ho
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package kafka

import (
	"github.com/savaki/kafka/protocol"
	"github.com/savaki/kafka/sizeof"
)

// ElectLeadersRequest; ApiKey: 43, Versions: 0-2
type ElectLeadersRequest struct {
	ElectionType    int8                // Type of elections to conduct for the partition. A value of '0' elects the preferred replica. A value of '1' elects the first live replica if there are no in-sync replica. Versions: 1+
	TopicPartitions []TopicPartitions43 // The topic partitions to elect leaders. Versions: 0+
	TimeoutMs       int32               // The time in ms to wait for the election to complete. Versions: 0+
}

// size of ElectLeadersRequest; Versions: 0-2
func (t ElectLeadersRequest) Size(version int16) int32 {
	var sz int32
	if version >= 1 {
		sz += sizeof.Int8 // ElectionType
	}
	sz += sizeof.ArrayLength // TopicPartitions
	for i := len(t.TopicPartitions) - 1; i >= 0; i-- {
		sz += t.TopicPartitions[i].Size(version)
	}
	sz += sizeof.Int32 // TimeoutMs
	return sz
}

// encode ElectLeadersRequest; Versions: 0-2
func (t ElectLeadersRequest) Encode(e *protocol.Encoder, version int16) {
	if version >= 1 {
		e.PutInt8(t.ElectionType) // ElectionType
	}
	// TopicPartitions
	len1 := len(t.TopicPartitions)
	e.PutArrayLength(len1)
	for i := 0; i < len1; i++ {
		t.TopicPartitions[i].Encode(e, version)
	}
	e.PutInt32(t.TimeoutMs) // TimeoutMs
}

// decode ElectLeadersRequest; Versions: 0-2
func (t *ElectLeadersRequest) Decode(d *protocol.Decoder, version int16) error {
	var err error
	if version >= 1 {
		t.ElectionType, err = d.Int8()
		if err != nil {
			return err
		}
	}
	// TopicPartitions
	if n, err := d.ArrayLength(); err != nil {
		return err
	} else if n >= 0 {
		t.TopicPartitions = make([]TopicPartitions43, n)
		for i := 0; i < n; i++ {
			var item TopicPartitions43
			if err := (&item).Decode(d, version); err != nil {
				return err
			}
			t.TopicPartitions[i] = item
		}
	}
	t.TimeoutMs, err = d.Int32()
	if err != nil {
		return err
	}
	return err
}

type TopicPartitions43 struct {
	Topic       string  // The name of a topic. Versions: 0+
	PartitionId []int32 // The partitions of this topic whose leader should be elected. Versions: 0+
}

// size of TopicPartitions43; Versions: 0-2
func (t TopicPartitions43) Size(version int16) int32 {
	var sz int32
	sz += sizeof.String(t.Topic)           // Topic
	sz += sizeof.Int32Array(t.PartitionId) // PartitionId
	return sz
}

// encode TopicPartitions43; Versions: 0-2
func (t TopicPartitions43) Encode(e *protocol.Encoder, version int16) {
	e.PutString(t.Topic)           // Topic
	e.PutInt32Array(t.PartitionId) // PartitionId
}

// decode TopicPartitions43; Versions: 0-2
func (t *TopicPartitions43) Decode(d *protocol.Decoder, version int16) error {
	var err error
	t.Topic, err = d.String()
	if err != nil {
		return err
	}
	t.PartitionId, err = d.Int32Array()
	if err != nil {
		return err
	}
	return err
}
