// Code generated by kafka-protocol-gen. DO NOT EDIT.
//
// Copyright 2019 Matt Ho
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package kafka

import (
	"github.com/savaki/kafka/protocol"
	"github.com/savaki/kafka/sizeof"
)

// CreateTopicsRequest; ApiKey: 19, Versions: 0-5
type CreateTopicsRequest struct {
	Topics       []CreatableTopic19 // The topics to create. Versions: 0+
	timeoutMs    int32              // How long to wait in milliseconds before timing out the request. Versions: 0+
	validateOnly bool               // If true, check that the topics can be created as specified, but don't create anything. Versions: 1+
}

// size of CreateTopicsRequest; Versions: 0-5
func (t CreateTopicsRequest) size(version int16) int32 {
	var sz int32
	sz += sizeof.ArrayLength // Topics
	for i := len(t.Topics) - 1; i >= 0; i-- {
		sz += t.Topics[i].size(version)
	}
	sz += sizeof.Int32 // timeoutMs
	if version >= 1 {
		sz += sizeof.Bool // validateOnly
	}
	return sz
}

// encode CreateTopicsRequest; Versions: 0-5
func (t CreateTopicsRequest) encode(e *protocol.Encoder, version int16) {
	// Topics
	len0 := len(t.Topics)
	e.PutArrayLength(len0)
	for i := 0; i < len0; i++ {
		t.Topics[i].encode(e, version)
	}
	e.PutInt32(t.timeoutMs) // timeoutMs
	if version >= 1 {
		e.PutBool(t.validateOnly) // validateOnly
	}
}

// decode CreateTopicsRequest; Versions: 0-5
func (t *CreateTopicsRequest) decode(d *protocol.Decoder, version int16) error {
	var err error
	// Topics
	if n, err := d.ArrayLength(); err != nil {
		return err
	} else if n >= 0 {
		t.Topics = make([]CreatableTopic19, n)
		for i := 0; i < n; i++ {
			var item CreatableTopic19
			if err := (&item).decode(d, version); err != nil {
				return err
			}
			t.Topics[i] = item
		}
	}
	t.timeoutMs, err = d.Int32()
	if err != nil {
		return err
	}
	if version >= 1 {
		t.validateOnly, err = d.Bool()
		if err != nil {
			return err
		}
	}
	return err
}

type CreatableTopic19 struct {
	Name              string                         // The topic name. Versions: 0+
	NumPartitions     int32                          // The number of partitions to create in the topic, or -1 if we are either specifying a manual partition assignment or using the default partitions. Versions: 0+
	ReplicationFactor int16                          // The number of replicas to create for each partition in the topic, or -1 if we are either specifying a manual partition assignment or using the default replication factor. Versions: 0+
	Assignments       []CreatableReplicaAssignment19 // The manual partition assignment, or the empty array if we are using automatic assignment. Versions: 0+
	Configs           []CreateableTopicConfig19      // The custom topic configurations to set. Versions: 0+
}

// size of CreatableTopic19; Versions: 0-5
func (t CreatableTopic19) size(version int16) int32 {
	var sz int32
	sz += sizeof.String(t.Name) // Name
	sz += sizeof.Int32          // NumPartitions
	sz += sizeof.Int16          // ReplicationFactor
	sz += sizeof.ArrayLength    // Assignments
	for i := len(t.Assignments) - 1; i >= 0; i-- {
		sz += t.Assignments[i].size(version)
	}
	sz += sizeof.ArrayLength // Configs
	for i := len(t.Configs) - 1; i >= 0; i-- {
		sz += t.Configs[i].size(version)
	}
	return sz
}

// encode CreatableTopic19; Versions: 0-5
func (t CreatableTopic19) encode(e *protocol.Encoder, version int16) {
	e.PutString(t.Name)             // Name
	e.PutInt32(t.NumPartitions)     // NumPartitions
	e.PutInt16(t.ReplicationFactor) // ReplicationFactor
	// Assignments
	len3 := len(t.Assignments)
	e.PutArrayLength(len3)
	for i := 0; i < len3; i++ {
		t.Assignments[i].encode(e, version)
	}
	// Configs
	len4 := len(t.Configs)
	e.PutArrayLength(len4)
	for i := 0; i < len4; i++ {
		t.Configs[i].encode(e, version)
	}
}

// decode CreatableTopic19; Versions: 0-5
func (t *CreatableTopic19) decode(d *protocol.Decoder, version int16) error {
	var err error
	t.Name, err = d.String()
	if err != nil {
		return err
	}
	t.NumPartitions, err = d.Int32()
	if err != nil {
		return err
	}
	t.ReplicationFactor, err = d.Int16()
	if err != nil {
		return err
	}
	// Assignments
	if n, err := d.ArrayLength(); err != nil {
		return err
	} else if n >= 0 {
		t.Assignments = make([]CreatableReplicaAssignment19, n)
		for i := 0; i < n; i++ {
			var item CreatableReplicaAssignment19
			if err := (&item).decode(d, version); err != nil {
				return err
			}
			t.Assignments[i] = item
		}
	}
	// Configs
	if n, err := d.ArrayLength(); err != nil {
		return err
	} else if n >= 0 {
		t.Configs = make([]CreateableTopicConfig19, n)
		for i := 0; i < n; i++ {
			var item CreateableTopicConfig19
			if err := (&item).decode(d, version); err != nil {
				return err
			}
			t.Configs[i] = item
		}
	}
	return err
}

type CreatableReplicaAssignment19 struct {
	PartitionIndex int32   // The partition index. Versions: 0+
	BrokerIds      []int32 // The brokers to place the partition on. Versions: 0+
}

// size of CreatableReplicaAssignment19; Versions: 0-5
func (t CreatableReplicaAssignment19) size(version int16) int32 {
	var sz int32
	sz += sizeof.Int32                   // PartitionIndex
	sz += sizeof.Int32Array(t.BrokerIds) // BrokerIds
	return sz
}

// encode CreatableReplicaAssignment19; Versions: 0-5
func (t CreatableReplicaAssignment19) encode(e *protocol.Encoder, version int16) {
	e.PutInt32(t.PartitionIndex) // PartitionIndex
	e.PutInt32Array(t.BrokerIds) // BrokerIds
}

// decode CreatableReplicaAssignment19; Versions: 0-5
func (t *CreatableReplicaAssignment19) decode(d *protocol.Decoder, version int16) error {
	var err error
	t.PartitionIndex, err = d.Int32()
	if err != nil {
		return err
	}
	t.BrokerIds, err = d.Int32Array()
	if err != nil {
		return err
	}
	return err
}

type CreateableTopicConfig19 struct {
	Name  string // The configuration name. Versions: 0+
	Value string // The configuration value. Versions: 0+
}

// size of CreateableTopicConfig19; Versions: 0-5
func (t CreateableTopicConfig19) size(version int16) int32 {
	var sz int32
	sz += sizeof.String(t.Name)  // Name
	sz += sizeof.String(t.Value) // Value
	return sz
}

// encode CreateableTopicConfig19; Versions: 0-5
func (t CreateableTopicConfig19) encode(e *protocol.Encoder, version int16) {
	e.PutString(t.Name)  // Name
	e.PutString(t.Value) // Value
}

// decode CreateableTopicConfig19; Versions: 0-5
func (t *CreateableTopicConfig19) decode(d *protocol.Decoder, version int16) error {
	var err error
	t.Name, err = d.String()
	if err != nil {
		return err
	}
	t.Value, err = d.String()
	if err != nil {
		return err
	}
	return err
}
