// Code generated by kafka-protocol-gen. DO NOT EDIT.
//
// Copyright 2019 Matt Ho
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package kafka

import (
	"github.com/savaki/kafka/protocol"
	"github.com/savaki/kafka/sizeof"
)

// DescribeConfigsResponse; ApiKey: 32, Versions: 0-2
type DescribeConfigsResponse struct {
	ThrottleTimeMs int32                     // The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota. Versions: 0+
	Results        []DescribeConfigsResult32 // The results for each resource. Versions: 0+
}

// size of DescribeConfigsResponse; Versions: 0-2
func (t DescribeConfigsResponse) size(version int16) int32 {
	var sz int32
	sz += sizeof.Int32       // ThrottleTimeMs
	sz += sizeof.ArrayLength // Results
	for i := len(t.Results) - 1; i >= 0; i-- {
		sz += t.Results[i].size(version)
	}
	return sz
}

// encode DescribeConfigsResponse; Versions: 0-2
func (t DescribeConfigsResponse) Encode(e *protocol.Encoder, version int16) {
	e.PutInt32(t.ThrottleTimeMs) // ThrottleTimeMs
	// Results
	len1 := len(t.Results)
	e.PutArrayLength(len1)
	for i := 0; i < len1; i++ {
		t.Results[i].Encode(e, version)
	}
}

// decode DescribeConfigsResponse; Versions: 0-2
func (t *DescribeConfigsResponse) Decode(d *protocol.Decoder, version int16) error {
	var err error
	t.ThrottleTimeMs, err = d.Int32()
	if err != nil {
		return err
	}
	// Results
	if n, err := d.ArrayLength(); err != nil {
		return err
	} else if n >= 0 {
		t.Results = make([]DescribeConfigsResult32, n)
		for i := 0; i < n; i++ {
			var item DescribeConfigsResult32
			if err := (&item).Decode(d, version); err != nil {
				return err
			}
			t.Results[i] = item
		}
	}
	return err
}

type DescribeConfigsResult32 struct {
	ErrorCode    int16                             // The error code, or 0 if we were able to successfully describe the configurations. Versions: 0+
	ErrorMessage string                            // The error message, or null if we were able to successfully describe the configurations. Versions: 0+
	ResourceType int8                              // The resource type. Versions: 0+
	ResourceName string                            // The resource name. Versions: 0+
	Configs      []DescribeConfigsResourceResult32 // Each listed configuration. Versions: 0+
}

// size of DescribeConfigsResult32; Versions: 0-2
func (t DescribeConfigsResult32) size(version int16) int32 {
	var sz int32
	sz += sizeof.Int16                  // ErrorCode
	sz += sizeof.String(t.ErrorMessage) // ErrorMessage
	sz += sizeof.Int8                   // ResourceType
	sz += sizeof.String(t.ResourceName) // ResourceName
	sz += sizeof.ArrayLength            // Configs
	for i := len(t.Configs) - 1; i >= 0; i-- {
		sz += t.Configs[i].size(version)
	}
	return sz
}

// encode DescribeConfigsResult32; Versions: 0-2
func (t DescribeConfigsResult32) Encode(e *protocol.Encoder, version int16) {
	e.PutInt16(t.ErrorCode)     // ErrorCode
	e.PutString(t.ErrorMessage) // ErrorMessage
	e.PutInt8(t.ResourceType)   // ResourceType
	e.PutString(t.ResourceName) // ResourceName
	// Configs
	len4 := len(t.Configs)
	e.PutArrayLength(len4)
	for i := 0; i < len4; i++ {
		t.Configs[i].Encode(e, version)
	}
}

// decode DescribeConfigsResult32; Versions: 0-2
func (t *DescribeConfigsResult32) Decode(d *protocol.Decoder, version int16) error {
	var err error
	t.ErrorCode, err = d.Int16()
	if err != nil {
		return err
	}
	t.ErrorMessage, err = d.String()
	if err != nil {
		return err
	}
	t.ResourceType, err = d.Int8()
	if err != nil {
		return err
	}
	t.ResourceName, err = d.String()
	if err != nil {
		return err
	}
	// Configs
	if n, err := d.ArrayLength(); err != nil {
		return err
	} else if n >= 0 {
		t.Configs = make([]DescribeConfigsResourceResult32, n)
		for i := 0; i < n; i++ {
			var item DescribeConfigsResourceResult32
			if err := (&item).Decode(d, version); err != nil {
				return err
			}
			t.Configs[i] = item
		}
	}
	return err
}

type DescribeConfigsResourceResult32 struct {
	Name         string                     // The configuration name. Versions: 0+
	Value        string                     // The configuration value. Versions: 0+
	ReadOnly     bool                       // True if the configuration is read-only. Versions: 0+
	IsDefault    bool                       // True if the configuration is not set. Versions: 0-0
	ConfigSource int8                       // The configuration source. Versions: 1+
	IsSensitive  bool                       // True if this configuration is sensitive. Versions: 0+
	Synonyms     []DescribeConfigsSynonym32 // The synonyms for this configuration key. Versions: 1+
}

// size of DescribeConfigsResourceResult32; Versions: 0-2
func (t DescribeConfigsResourceResult32) size(version int16) int32 {
	var sz int32
	sz += sizeof.String(t.Name)  // Name
	sz += sizeof.String(t.Value) // Value
	sz += sizeof.Bool            // ReadOnly
	if version >= 0 && version <= 0 {
		sz += sizeof.Bool // IsDefault
	}
	if version >= 1 {
		sz += sizeof.Int8 // ConfigSource
	}
	sz += sizeof.Bool // IsSensitive
	if version >= 1 {
		sz += sizeof.ArrayLength // Synonyms
		for i := len(t.Synonyms) - 1; i >= 0; i-- {
			sz += t.Synonyms[i].size(version)
		}
	}
	return sz
}

// encode DescribeConfigsResourceResult32; Versions: 0-2
func (t DescribeConfigsResourceResult32) Encode(e *protocol.Encoder, version int16) {
	e.PutString(t.Name)   // Name
	e.PutString(t.Value)  // Value
	e.PutBool(t.ReadOnly) // ReadOnly
	if version >= 0 && version <= 0 {
		e.PutBool(t.IsDefault) // IsDefault
	}
	if version >= 1 {
		e.PutInt8(t.ConfigSource) // ConfigSource
	}
	e.PutBool(t.IsSensitive) // IsSensitive
	if version >= 1 {
		// Synonyms
		len6 := len(t.Synonyms)
		e.PutArrayLength(len6)
		for i := 0; i < len6; i++ {
			t.Synonyms[i].Encode(e, version)
		}
	}
}

// decode DescribeConfigsResourceResult32; Versions: 0-2
func (t *DescribeConfigsResourceResult32) Decode(d *protocol.Decoder, version int16) error {
	var err error
	t.Name, err = d.String()
	if err != nil {
		return err
	}
	t.Value, err = d.String()
	if err != nil {
		return err
	}
	t.ReadOnly, err = d.Bool()
	if err != nil {
		return err
	}
	if version >= 0 && version <= 0 {
		t.IsDefault, err = d.Bool()
		if err != nil {
			return err
		}
	}
	if version >= 1 {
		t.ConfigSource, err = d.Int8()
		if err != nil {
			return err
		}
	}
	t.IsSensitive, err = d.Bool()
	if err != nil {
		return err
	}
	if version >= 1 {
		// Synonyms
		if n, err := d.ArrayLength(); err != nil {
			return err
		} else if n >= 0 {
			t.Synonyms = make([]DescribeConfigsSynonym32, n)
			for i := 0; i < n; i++ {
				var item DescribeConfigsSynonym32
				if err := (&item).Decode(d, version); err != nil {
					return err
				}
				t.Synonyms[i] = item
			}
		}
	}
	return err
}

type DescribeConfigsSynonym32 struct {
	Name   string // The synonym name. Versions: 1+
	Value  string // The synonym value. Versions: 1+
	Source int8   // The synonym source. Versions: 1+
}

// size of DescribeConfigsSynonym32; Versions: 0-2
func (t DescribeConfigsSynonym32) size(version int16) int32 {
	var sz int32
	if version >= 1 {
		sz += sizeof.String(t.Name) // Name
	}
	if version >= 1 {
		sz += sizeof.String(t.Value) // Value
	}
	if version >= 1 {
		sz += sizeof.Int8 // Source
	}
	return sz
}

// encode DescribeConfigsSynonym32; Versions: 0-2
func (t DescribeConfigsSynonym32) Encode(e *protocol.Encoder, version int16) {
	if version >= 1 {
		e.PutString(t.Name) // Name
	}
	if version >= 1 {
		e.PutString(t.Value) // Value
	}
	if version >= 1 {
		e.PutInt8(t.Source) // Source
	}
}

// decode DescribeConfigsSynonym32; Versions: 0-2
func (t *DescribeConfigsSynonym32) Decode(d *protocol.Decoder, version int16) error {
	var err error
	if version >= 1 {
		t.Name, err = d.String()
		if err != nil {
			return err
		}
	}
	if version >= 1 {
		t.Value, err = d.String()
		if err != nil {
			return err
		}
	}
	if version >= 1 {
		t.Source, err = d.Int8()
		if err != nil {
			return err
		}
	}
	return err
}
