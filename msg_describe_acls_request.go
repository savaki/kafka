// Code generated by kafka-protocol-gen. DO NOT EDIT.
//
// Copyright 2019 Matt Ho
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package kafka

import (
	"github.com/savaki/kafka/protocol"
	"github.com/savaki/kafka/sizeof"
)

// DescribeAclsRequest; ApiKey: 29, Versions: 0-1
type DescribeAclsRequest struct {
	ResourceType        int8   // The resource type. Versions: 0+
	ResourceNameFilter  string // The resource name, or null to match any resource name. Versions: 0+
	ResourcePatternType int8   // The resource pattern to match. Versions: 1+
	PrincipalFilter     string // The principal to match, or null to match any principal. Versions: 0+
	HostFilter          string // The host to match, or null to match any host. Versions: 0+
	Operation           int8   // The operation to match. Versions: 0+
	PermissionType      int8   // The permission type to match. Versions: 0+
}

// size of DescribeAclsRequest; Versions: 0-1
func (t DescribeAclsRequest) Size(version int16) int32 {
	var sz int32
	sz += sizeof.Int8                         // ResourceType
	sz += sizeof.String(t.ResourceNameFilter) // ResourceNameFilter
	if version >= 1 {
		sz += sizeof.Int8 // ResourcePatternType
	}
	sz += sizeof.String(t.PrincipalFilter) // PrincipalFilter
	sz += sizeof.String(t.HostFilter)      // HostFilter
	sz += sizeof.Int8                      // Operation
	sz += sizeof.Int8                      // PermissionType
	return sz
}

// encode DescribeAclsRequest; Versions: 0-1
func (t DescribeAclsRequest) Encode(e *protocol.Encoder, version int16) {
	e.PutInt8(t.ResourceType)         // ResourceType
	e.PutString(t.ResourceNameFilter) // ResourceNameFilter
	if version >= 1 {
		e.PutInt8(t.ResourcePatternType) // ResourcePatternType
	}
	e.PutString(t.PrincipalFilter) // PrincipalFilter
	e.PutString(t.HostFilter)      // HostFilter
	e.PutInt8(t.Operation)         // Operation
	e.PutInt8(t.PermissionType)    // PermissionType
}

// decode DescribeAclsRequest; Versions: 0-1
func (t *DescribeAclsRequest) Decode(d *protocol.Decoder, version int16) error {
	var err error
	t.ResourceType, err = d.Int8()
	if err != nil {
		return err
	}
	t.ResourceNameFilter, err = d.String()
	if err != nil {
		return err
	}
	if version >= 1 {
		t.ResourcePatternType, err = d.Int8()
		if err != nil {
			return err
		}
	}
	t.PrincipalFilter, err = d.String()
	if err != nil {
		return err
	}
	t.HostFilter, err = d.String()
	if err != nil {
		return err
	}
	t.Operation, err = d.Int8()
	if err != nil {
		return err
	}
	t.PermissionType, err = d.Int8()
	if err != nil {
		return err
	}
	return err
}
