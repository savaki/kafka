// Code generated by kafka-protocol-gen. DO NOT EDIT.
//
// Copyright 2019 Matt Ho
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package kafka

import (
	"github.com/savaki/kafka/protocol"
	"github.com/savaki/kafka/sizeof"
)

// LeaveGroupResponse; ApiKey: 13, Versions: 0-4
type LeaveGroupResponse struct {
	ThrottleTimeMs int32              // The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota. Versions: 1+
	ErrorCode      int16              // The error code, or 0 if there was no error. Versions: 0+
	Members        []MemberResponse13 // List of leaving member responses. Versions: 3+
}

// size of LeaveGroupResponse; Versions: 0-4
func (t LeaveGroupResponse) size(version int16) int32 {
	var sz int32
	if version >= 1 {
		sz += sizeof.Int32 // ThrottleTimeMs
	}
	sz += sizeof.Int16 // ErrorCode
	if version >= 3 {
		sz += sizeof.ArrayLength // Members
		for i := len(t.Members) - 1; i >= 0; i-- {
			sz += t.Members[i].size(version)
		}
	}
	return sz
}

// encode LeaveGroupResponse; Versions: 0-4
func (t LeaveGroupResponse) encode(e *protocol.Encoder, version int16) {
	if version >= 1 {
		e.PutInt32(t.ThrottleTimeMs) // ThrottleTimeMs
	}
	e.PutInt16(t.ErrorCode) // ErrorCode
	if version >= 3 {
		// Members
		len2 := len(t.Members)
		e.PutArrayLength(len2)
		for i := 0; i < len2; i++ {
			t.Members[i].encode(e, version)
		}
	}
}

// decode LeaveGroupResponse; Versions: 0-4
func (t *LeaveGroupResponse) decode(d *protocol.Decoder, version int16) error {
	var err error
	if version >= 1 {
		t.ThrottleTimeMs, err = d.Int32()
		if err != nil {
			return err
		}
	}
	t.ErrorCode, err = d.Int16()
	if err != nil {
		return err
	}
	if version >= 3 {
		// Members
		if n, err := d.ArrayLength(); err != nil {
			return err
		} else if n >= 0 {
			t.Members = make([]MemberResponse13, n)
			for i := 0; i < n; i++ {
				var item MemberResponse13
				if err := (&item).decode(d, version); err != nil {
					return err
				}
				t.Members[i] = item
			}
		}
	}
	return err
}

type MemberResponse13 struct {
	MemberId        string // The member ID to remove from the group. Versions: 3+
	GroupInstanceId string // The group instance ID to remove from the group. Versions: 3+
	ErrorCode       int16  // The error code, or 0 if there was no error. Versions: 3+
}

// size of MemberResponse13; Versions: 0-4
func (t MemberResponse13) size(version int16) int32 {
	var sz int32
	if version >= 3 {
		sz += sizeof.String(t.MemberId) // MemberId
	}
	if version >= 3 {
		sz += sizeof.String(t.GroupInstanceId) // GroupInstanceId
	}
	if version >= 3 {
		sz += sizeof.Int16 // ErrorCode
	}
	return sz
}

// encode MemberResponse13; Versions: 0-4
func (t MemberResponse13) encode(e *protocol.Encoder, version int16) {
	if version >= 3 {
		e.PutString(t.MemberId) // MemberId
	}
	if version >= 3 {
		e.PutString(t.GroupInstanceId) // GroupInstanceId
	}
	if version >= 3 {
		e.PutInt16(t.ErrorCode) // ErrorCode
	}
}

// decode MemberResponse13; Versions: 0-4
func (t *MemberResponse13) decode(d *protocol.Decoder, version int16) error {
	var err error
	if version >= 3 {
		t.MemberId, err = d.String()
		if err != nil {
			return err
		}
	}
	if version >= 3 {
		t.GroupInstanceId, err = d.String()
		if err != nil {
			return err
		}
	}
	if version >= 3 {
		t.ErrorCode, err = d.Int16()
		if err != nil {
			return err
		}
	}
	return err
}
