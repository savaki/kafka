// Code generated by kafka-protocol-gen. DO NOT EDIT.
//
// Copyright 2019 Matt Ho
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package kafka

import (
	"github.com/savaki/kafka/protocol"
	"github.com/savaki/kafka/sizeof"
)

// DescribeLogDirsRequest; ApiKey: 35, Versions: 0-1
type DescribeLogDirsRequest struct {
	Topics []DescribableLogDirTopic35 // Each topic that we want to describe log directories for, or null for all topics. Versions: 0+
}

// size of DescribeLogDirsRequest; Versions: 0-1
func (t DescribeLogDirsRequest) Size(version int16) int32 {
	var sz int32
	sz += sizeof.ArrayLength // Topics
	for i := len(t.Topics) - 1; i >= 0; i-- {
		sz += t.Topics[i].Size(version)
	}
	return sz
}

// encode DescribeLogDirsRequest; Versions: 0-1
func (t DescribeLogDirsRequest) Encode(e *protocol.Encoder, version int16) {
	// Topics
	len0 := len(t.Topics)
	e.PutArrayLength(len0)
	for i := 0; i < len0; i++ {
		t.Topics[i].Encode(e, version)
	}
}

// decode DescribeLogDirsRequest; Versions: 0-1
func (t *DescribeLogDirsRequest) Decode(d *protocol.Decoder, version int16) error {
	var err error
	// Topics
	if n, err := d.ArrayLength(); err != nil {
		return err
	} else if n >= 0 {
		t.Topics = make([]DescribableLogDirTopic35, n)
		for i := 0; i < n; i++ {
			var item DescribableLogDirTopic35
			if err := (&item).Decode(d, version); err != nil {
				return err
			}
			t.Topics[i] = item
		}
	}
	return err
}

type DescribableLogDirTopic35 struct {
	Topic          string  // The topic name Versions: 0+
	PartitionIndex []int32 // The partition indxes. Versions: 0+
}

// size of DescribableLogDirTopic35; Versions: 0-1
func (t DescribableLogDirTopic35) Size(version int16) int32 {
	var sz int32
	sz += sizeof.String(t.Topic)              // Topic
	sz += sizeof.Int32Array(t.PartitionIndex) // PartitionIndex
	return sz
}

// encode DescribableLogDirTopic35; Versions: 0-1
func (t DescribableLogDirTopic35) Encode(e *protocol.Encoder, version int16) {
	e.PutString(t.Topic)              // Topic
	e.PutInt32Array(t.PartitionIndex) // PartitionIndex
}

// decode DescribableLogDirTopic35; Versions: 0-1
func (t *DescribableLogDirTopic35) Decode(d *protocol.Decoder, version int16) error {
	var err error
	t.Topic, err = d.String()
	if err != nil {
		return err
	}
	t.PartitionIndex, err = d.Int32Array()
	if err != nil {
		return err
	}
	return err
}
