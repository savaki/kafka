// Code generated by kafka-protocol-gen. DO NOT EDIT.
//
// Copyright 2019 Matt Ho
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package kafka

import (
	"github.com/savaki/kafka/protocol"
	"github.com/savaki/kafka/sizeof"
)

// DescribeDelegationTokenRequest; ApiKey: 41, Versions: 0-1
type DescribeDelegationTokenRequest struct {
	Owners []DescribeDelegationTokenOwner41 // Each owner that we want to describe delegation tokens for, or null to describe all tokens. Versions: 0+
}

// size of DescribeDelegationTokenRequest; Versions: 0-1
func (t DescribeDelegationTokenRequest) Size(version int16) int32 {
	var sz int32
	sz += sizeof.ArrayLength // Owners
	for i := len(t.Owners) - 1; i >= 0; i-- {
		sz += t.Owners[i].Size(version)
	}
	return sz
}

// encode DescribeDelegationTokenRequest; Versions: 0-1
func (t DescribeDelegationTokenRequest) Encode(e *protocol.Encoder, version int16) {
	// Owners
	len0 := len(t.Owners)
	e.PutArrayLength(len0)
	for i := 0; i < len0; i++ {
		t.Owners[i].Encode(e, version)
	}
}

// decode DescribeDelegationTokenRequest; Versions: 0-1
func (t *DescribeDelegationTokenRequest) Decode(d *protocol.Decoder, version int16) error {
	var err error
	// Owners
	if n, err := d.ArrayLength(); err != nil {
		return err
	} else if n >= 0 {
		t.Owners = make([]DescribeDelegationTokenOwner41, n)
		for i := 0; i < n; i++ {
			var item DescribeDelegationTokenOwner41
			if err := (&item).Decode(d, version); err != nil {
				return err
			}
			t.Owners[i] = item
		}
	}
	return err
}

type DescribeDelegationTokenOwner41 struct {
	PrincipalType string // The owner principal type. Versions: 0+
	PrincipalName string // The owner principal name. Versions: 0+
}

// size of DescribeDelegationTokenOwner41; Versions: 0-1
func (t DescribeDelegationTokenOwner41) Size(version int16) int32 {
	var sz int32
	sz += sizeof.String(t.PrincipalType) // PrincipalType
	sz += sizeof.String(t.PrincipalName) // PrincipalName
	return sz
}

// encode DescribeDelegationTokenOwner41; Versions: 0-1
func (t DescribeDelegationTokenOwner41) Encode(e *protocol.Encoder, version int16) {
	e.PutString(t.PrincipalType) // PrincipalType
	e.PutString(t.PrincipalName) // PrincipalName
}

// decode DescribeDelegationTokenOwner41; Versions: 0-1
func (t *DescribeDelegationTokenOwner41) Decode(d *protocol.Decoder, version int16) error {
	var err error
	t.PrincipalType, err = d.String()
	if err != nil {
		return err
	}
	t.PrincipalName, err = d.String()
	if err != nil {
		return err
	}
	return err
}
