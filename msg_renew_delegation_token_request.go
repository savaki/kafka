// Code generated by kafka-protocol-gen. DO NOT EDIT.
//
// Copyright 2019 Matt Ho
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package kafka

import (
	"github.com/savaki/kafka/protocol"
	"github.com/savaki/kafka/sizeof"
)

// RenewDelegationTokenRequest; ApiKey: 39, Versions: 0-1
type RenewDelegationTokenRequest struct {
	Hmac          []byte // The HMAC of the delegation token to be renewed. Versions: 0+
	RenewPeriodMs int64  // The renewal time period in milliseconds. Versions: 0+
}

// size of RenewDelegationTokenRequest; Versions: 0-1
func (t RenewDelegationTokenRequest) Size(version int16) int32 {
	var sz int32
	sz += sizeof.Bytes(t.Hmac) // Hmac
	sz += sizeof.Int64         // RenewPeriodMs
	return sz
}

// encode RenewDelegationTokenRequest; Versions: 0-1
func (t RenewDelegationTokenRequest) Encode(e *protocol.Encoder, version int16) {
	e.PutBytes(t.Hmac)          // Hmac
	e.PutInt64(t.RenewPeriodMs) // RenewPeriodMs
}

// decode RenewDelegationTokenRequest; Versions: 0-1
func (t *RenewDelegationTokenRequest) Decode(d *protocol.Decoder, version int16) error {
	var err error
	t.Hmac, err = d.Bytes()
	if err != nil {
		return err
	}
	t.RenewPeriodMs, err = d.Int64()
	if err != nil {
		return err
	}
	return err
}
