// Code generated by kafka-protocol-gen. DO NOT EDIT.
//
// Copyright 2019 Matt Ho
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package kafka

import (
	"github.com/savaki/kafka/protocol"
	"github.com/savaki/kafka/sizeof"
)

// CreateDelegationTokenRequest; ApiKey: 38, Versions: 0-2
type CreateDelegationTokenRequest struct {
	Renewers      []CreatableRenewers38 // A list of those who are allowed to renew this token before it expires. Versions: 0+
	MaxLifetimeMs int64                 // The maximum lifetime of the token in milliseconds, or -1 to use the server side default. Versions: 0+
}

// size of CreateDelegationTokenRequest; Versions: 0-2
func (t CreateDelegationTokenRequest) size(version int16) int32 {
	var sz int32
	sz += sizeof.ArrayLength // Renewers
	for i := len(t.Renewers) - 1; i >= 0; i-- {
		sz += t.Renewers[i].size(version)
	}
	sz += sizeof.Int64 // MaxLifetimeMs
	return sz
}

// encode CreateDelegationTokenRequest; Versions: 0-2
func (t CreateDelegationTokenRequest) Encode(e *protocol.Encoder, version int16) {
	// Renewers
	len0 := len(t.Renewers)
	e.PutArrayLength(len0)
	for i := 0; i < len0; i++ {
		t.Renewers[i].Encode(e, version)
	}
	e.PutInt64(t.MaxLifetimeMs) // MaxLifetimeMs
}

// decode CreateDelegationTokenRequest; Versions: 0-2
func (t *CreateDelegationTokenRequest) Decode(d *protocol.Decoder, version int16) error {
	var err error
	// Renewers
	if n, err := d.ArrayLength(); err != nil {
		return err
	} else if n >= 0 {
		t.Renewers = make([]CreatableRenewers38, n)
		for i := 0; i < n; i++ {
			var item CreatableRenewers38
			if err := (&item).Decode(d, version); err != nil {
				return err
			}
			t.Renewers[i] = item
		}
	}
	t.MaxLifetimeMs, err = d.Int64()
	if err != nil {
		return err
	}
	return err
}

type CreatableRenewers38 struct {
	PrincipalType string // The type of the Kafka principal. Versions: 0+
	PrincipalName string // The name of the Kafka principal. Versions: 0+
}

// size of CreatableRenewers38; Versions: 0-2
func (t CreatableRenewers38) size(version int16) int32 {
	var sz int32
	sz += sizeof.String(t.PrincipalType) // PrincipalType
	sz += sizeof.String(t.PrincipalName) // PrincipalName
	return sz
}

// encode CreatableRenewers38; Versions: 0-2
func (t CreatableRenewers38) Encode(e *protocol.Encoder, version int16) {
	e.PutString(t.PrincipalType) // PrincipalType
	e.PutString(t.PrincipalName) // PrincipalName
}

// decode CreatableRenewers38; Versions: 0-2
func (t *CreatableRenewers38) Decode(d *protocol.Decoder, version int16) error {
	var err error
	t.PrincipalType, err = d.String()
	if err != nil {
		return err
	}
	t.PrincipalName, err = d.String()
	if err != nil {
		return err
	}
	return err
}
