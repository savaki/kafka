// Code generated by kafka-protocol-gen. DO NOT EDIT.
//
// Copyright 2019 Matt Ho
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package kafka

import (
	"github.com/savaki/kafka/protocol"
	"github.com/savaki/kafka/sizeof"
)

// ListGroupsResponse; ApiKey: 16, Versions: 0-3
type ListGroupsResponse struct {
	ThrottleTimeMs int32           // The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota. Versions: 1+
	ErrorCode      int16           // The error code, or 0 if there was no error. Versions: 0+
	Groups         []ListedGroup16 // Each group in the response. Versions: 0+
}

// size of ListGroupsResponse; Versions: 0-3
func (t ListGroupsResponse) Size(version int16) int32 {
	var sz int32
	if version >= 1 {
		sz += sizeof.Int32 // ThrottleTimeMs
	}
	sz += sizeof.Int16       // ErrorCode
	sz += sizeof.ArrayLength // Groups
	for i := len(t.Groups) - 1; i >= 0; i-- {
		sz += t.Groups[i].Size(version)
	}
	return sz
}

// encode ListGroupsResponse; Versions: 0-3
func (t ListGroupsResponse) Encode(e *protocol.Encoder, version int16) {
	if version >= 1 {
		e.PutInt32(t.ThrottleTimeMs) // ThrottleTimeMs
	}
	e.PutInt16(t.ErrorCode) // ErrorCode
	// Groups
	len2 := len(t.Groups)
	e.PutArrayLength(len2)
	for i := 0; i < len2; i++ {
		t.Groups[i].Encode(e, version)
	}
}

// decode ListGroupsResponse; Versions: 0-3
func (t *ListGroupsResponse) Decode(d *protocol.Decoder, version int16) error {
	var err error
	if version >= 1 {
		t.ThrottleTimeMs, err = d.Int32()
		if err != nil {
			return err
		}
	}
	t.ErrorCode, err = d.Int16()
	if err != nil {
		return err
	}
	// Groups
	if n, err := d.ArrayLength(); err != nil {
		return err
	} else if n >= 0 {
		t.Groups = make([]ListedGroup16, n)
		for i := 0; i < n; i++ {
			var item ListedGroup16
			if err := (&item).Decode(d, version); err != nil {
				return err
			}
			t.Groups[i] = item
		}
	}
	return err
}

type ListedGroup16 struct {
	GroupId      string // The group ID. Versions: 0+
	ProtocolType string // The group protocol type. Versions: 0+
}

// size of ListedGroup16; Versions: 0-3
func (t ListedGroup16) Size(version int16) int32 {
	var sz int32
	sz += sizeof.String(t.GroupId)      // GroupId
	sz += sizeof.String(t.ProtocolType) // ProtocolType
	return sz
}

// encode ListedGroup16; Versions: 0-3
func (t ListedGroup16) Encode(e *protocol.Encoder, version int16) {
	e.PutString(t.GroupId)      // GroupId
	e.PutString(t.ProtocolType) // ProtocolType
}

// decode ListedGroup16; Versions: 0-3
func (t *ListedGroup16) Decode(d *protocol.Decoder, version int16) error {
	var err error
	t.GroupId, err = d.String()
	if err != nil {
		return err
	}
	t.ProtocolType, err = d.String()
	if err != nil {
		return err
	}
	return err
}
