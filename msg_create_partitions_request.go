// Code generated by kafka-protocol-gen. DO NOT EDIT.
//
// Copyright 2019 Matt Ho
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package kafka

import (
	"github.com/savaki/kafka/protocol"
	"github.com/savaki/kafka/sizeof"
)

// CreatePartitionsRequest; ApiKey: 37, Versions: 0-1
type CreatePartitionsRequest struct {
	Topics       []CreatePartitionsTopic37 // Each topic that we want to create new partitions inside. Versions: 0+
	TimeoutMs    int32                     // The time in ms to wait for the partitions to be created. Versions: 0+
	ValidateOnly bool                      // If true, then validate the request, but don't actually increase the number of partitions. Versions: 0+
}

// size of CreatePartitionsRequest; Versions: 0-1
func (t CreatePartitionsRequest) Size(version int16) int32 {
	var sz int32
	sz += sizeof.ArrayLength // Topics
	for i := len(t.Topics) - 1; i >= 0; i-- {
		sz += t.Topics[i].Size(version)
	}
	sz += sizeof.Int32 // TimeoutMs
	sz += sizeof.Bool  // ValidateOnly
	return sz
}

// encode CreatePartitionsRequest; Versions: 0-1
func (t CreatePartitionsRequest) Encode(e *protocol.Encoder, version int16) {
	// Topics
	len0 := len(t.Topics)
	e.PutArrayLength(len0)
	for i := 0; i < len0; i++ {
		t.Topics[i].Encode(e, version)
	}
	e.PutInt32(t.TimeoutMs)   // TimeoutMs
	e.PutBool(t.ValidateOnly) // ValidateOnly
}

// decode CreatePartitionsRequest; Versions: 0-1
func (t *CreatePartitionsRequest) Decode(d *protocol.Decoder, version int16) error {
	var err error
	// Topics
	if n, err := d.ArrayLength(); err != nil {
		return err
	} else if n >= 0 {
		t.Topics = make([]CreatePartitionsTopic37, n)
		for i := 0; i < n; i++ {
			var item CreatePartitionsTopic37
			if err := (&item).Decode(d, version); err != nil {
				return err
			}
			t.Topics[i] = item
		}
	}
	t.TimeoutMs, err = d.Int32()
	if err != nil {
		return err
	}
	t.ValidateOnly, err = d.Bool()
	if err != nil {
		return err
	}
	return err
}

type CreatePartitionsTopic37 struct {
	Name        string                         // The topic name. Versions: 0+
	Count       int32                          // The new partition count. Versions: 0+
	Assignments []CreatePartitionsAssignment37 // The new partition assignments. Versions: 0+
}

// size of CreatePartitionsTopic37; Versions: 0-1
func (t CreatePartitionsTopic37) Size(version int16) int32 {
	var sz int32
	sz += sizeof.String(t.Name) // Name
	sz += sizeof.Int32          // Count
	sz += sizeof.ArrayLength    // Assignments
	for i := len(t.Assignments) - 1; i >= 0; i-- {
		sz += t.Assignments[i].Size(version)
	}
	return sz
}

// encode CreatePartitionsTopic37; Versions: 0-1
func (t CreatePartitionsTopic37) Encode(e *protocol.Encoder, version int16) {
	e.PutString(t.Name) // Name
	e.PutInt32(t.Count) // Count
	// Assignments
	len2 := len(t.Assignments)
	e.PutArrayLength(len2)
	for i := 0; i < len2; i++ {
		t.Assignments[i].Encode(e, version)
	}
}

// decode CreatePartitionsTopic37; Versions: 0-1
func (t *CreatePartitionsTopic37) Decode(d *protocol.Decoder, version int16) error {
	var err error
	t.Name, err = d.String()
	if err != nil {
		return err
	}
	t.Count, err = d.Int32()
	if err != nil {
		return err
	}
	// Assignments
	if n, err := d.ArrayLength(); err != nil {
		return err
	} else if n >= 0 {
		t.Assignments = make([]CreatePartitionsAssignment37, n)
		for i := 0; i < n; i++ {
			var item CreatePartitionsAssignment37
			if err := (&item).Decode(d, version); err != nil {
				return err
			}
			t.Assignments[i] = item
		}
	}
	return err
}

type CreatePartitionsAssignment37 struct {
	BrokerIds []int32 // The assigned broker IDs. Versions: 0+
}

// size of CreatePartitionsAssignment37; Versions: 0-1
func (t CreatePartitionsAssignment37) Size(version int16) int32 {
	var sz int32
	sz += sizeof.Int32Array(t.BrokerIds) // BrokerIds
	return sz
}

// encode CreatePartitionsAssignment37; Versions: 0-1
func (t CreatePartitionsAssignment37) Encode(e *protocol.Encoder, version int16) {
	e.PutInt32Array(t.BrokerIds) // BrokerIds
}

// decode CreatePartitionsAssignment37; Versions: 0-1
func (t *CreatePartitionsAssignment37) Decode(d *protocol.Decoder, version int16) error {
	var err error
	t.BrokerIds, err = d.Int32Array()
	if err != nil {
		return err
	}
	return err
}
