// Code generated by kafka-protocol-gen. DO NOT EDIT.
//
// Copyright 2019 Matt Ho
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package kafka

import (
	"github.com/savaki/kafka/protocol"
	"github.com/savaki/kafka/sizeof"
)

// DeleteAclsRequest; ApiKey: 31, Versions: 0-1
type DeleteAclsRequest struct {
	Filters []DeleteAclsFilter31 // The filters to use when deleting ACLs. Versions: 0+
}

// size of DeleteAclsRequest; Versions: 0-1
func (t DeleteAclsRequest) size(version int16) int32 {
	var sz int32
	sz += sizeof.ArrayLength // Filters
	for i := len(t.Filters) - 1; i >= 0; i-- {
		sz += t.Filters[i].size(version)
	}
	return sz
}

// encode DeleteAclsRequest; Versions: 0-1
func (t DeleteAclsRequest) Encode(e *protocol.Encoder, version int16) {
	// Filters
	len0 := len(t.Filters)
	e.PutArrayLength(len0)
	for i := 0; i < len0; i++ {
		t.Filters[i].Encode(e, version)
	}
}

// decode DeleteAclsRequest; Versions: 0-1
func (t *DeleteAclsRequest) Decode(d *protocol.Decoder, version int16) error {
	var err error
	// Filters
	if n, err := d.ArrayLength(); err != nil {
		return err
	} else if n >= 0 {
		t.Filters = make([]DeleteAclsFilter31, n)
		for i := 0; i < n; i++ {
			var item DeleteAclsFilter31
			if err := (&item).Decode(d, version); err != nil {
				return err
			}
			t.Filters[i] = item
		}
	}
	return err
}

type DeleteAclsFilter31 struct {
	ResourceTypeFilter int8   // The resource type. Versions: 0+
	ResourceNameFilter string // The resource name. Versions: 0+
	PatternTypeFilter  int8   // The pattern type. Versions: 1+
	PrincipalFilter    string // The principal filter, or null to accept all principals. Versions: 0+
	HostFilter         string // The host filter, or null to accept all hosts. Versions: 0+
	Operation          int8   // The ACL operation. Versions: 0+
	PermissionType     int8   // The permission type. Versions: 0+
}

// size of DeleteAclsFilter31; Versions: 0-1
func (t DeleteAclsFilter31) size(version int16) int32 {
	var sz int32
	sz += sizeof.Int8                         // ResourceTypeFilter
	sz += sizeof.String(t.ResourceNameFilter) // ResourceNameFilter
	if version >= 1 {
		sz += sizeof.Int8 // PatternTypeFilter
	}
	sz += sizeof.String(t.PrincipalFilter) // PrincipalFilter
	sz += sizeof.String(t.HostFilter)      // HostFilter
	sz += sizeof.Int8                      // Operation
	sz += sizeof.Int8                      // PermissionType
	return sz
}

// encode DeleteAclsFilter31; Versions: 0-1
func (t DeleteAclsFilter31) Encode(e *protocol.Encoder, version int16) {
	e.PutInt8(t.ResourceTypeFilter)   // ResourceTypeFilter
	e.PutString(t.ResourceNameFilter) // ResourceNameFilter
	if version >= 1 {
		e.PutInt8(t.PatternTypeFilter) // PatternTypeFilter
	}
	e.PutString(t.PrincipalFilter) // PrincipalFilter
	e.PutString(t.HostFilter)      // HostFilter
	e.PutInt8(t.Operation)         // Operation
	e.PutInt8(t.PermissionType)    // PermissionType
}

// decode DeleteAclsFilter31; Versions: 0-1
func (t *DeleteAclsFilter31) Decode(d *protocol.Decoder, version int16) error {
	var err error
	t.ResourceTypeFilter, err = d.Int8()
	if err != nil {
		return err
	}
	t.ResourceNameFilter, err = d.String()
	if err != nil {
		return err
	}
	if version >= 1 {
		t.PatternTypeFilter, err = d.Int8()
		if err != nil {
			return err
		}
	}
	t.PrincipalFilter, err = d.String()
	if err != nil {
		return err
	}
	t.HostFilter, err = d.String()
	if err != nil {
		return err
	}
	t.Operation, err = d.Int8()
	if err != nil {
		return err
	}
	t.PermissionType, err = d.Int8()
	if err != nil {
		return err
	}
	return err
}
